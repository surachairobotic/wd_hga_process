// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const SaveMap_RequestRefStruct = StructType({
  map_topic: primitiveTypes.string,
  map_url: primitiveTypes.string,
  image_format: primitiveTypes.string,
  map_mode: primitiveTypes.string,
  free_thresh: primitiveTypes.float32,
  occupied_thresh: primitiveTypes.float32,
});
const SaveMap_RequestRefArray = ArrayType(SaveMap_RequestRefStruct);
const SaveMap_RequestRefStructArray = StructType({
  data: SaveMap_RequestRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SaveMap_RequestWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SaveMap_RequestRefStruct(other._refObject.toObject());
      this._map_topicIntialized = true;
      this._wrapperFields.map_topic =  new StringWrapper(other._wrapperFields.map_topic);
      this._map_urlIntialized = true;
      this._wrapperFields.map_url =  new StringWrapper(other._wrapperFields.map_url);
      this._image_formatIntialized = true;
      this._wrapperFields.image_format =  new StringWrapper(other._wrapperFields.image_format);
      this._map_modeIntialized = true;
      this._wrapperFields.map_mode =  new StringWrapper(other._wrapperFields.map_mode);
      this._free_threshIntialized = true;
      this._occupied_threshIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SaveMap_RequestRefStruct();
    this._map_topicIntialized = false;
    this._wrapperFields.map_topic = new StringWrapper();
    this._map_urlIntialized = false;
    this._wrapperFields.map_url = new StringWrapper();
    this._image_formatIntialized = false;
    this._wrapperFields.image_format = new StringWrapper();
    this._map_modeIntialized = false;
    this._wrapperFields.map_mode = new StringWrapper();
    this._free_threshIntialized = false;
    this._occupied_threshIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new SaveMap_RequestWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SaveMap_RequestArrayWrapper;
  }
  static get ArrayType() {
    return SaveMap_RequestArrayWrapper;
  }
  static get refObjectArrayType() {
    return SaveMap_RequestRefStructArray
  }
  static get refObjectType() {
    return SaveMap_RequestRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._map_topicIntialized) {
        throw new TypeError('Invalid argument: map_topic in SaveMap_Request');
      }
      if (!this._map_urlIntialized) {
        throw new TypeError('Invalid argument: map_url in SaveMap_Request');
      }
      if (!this._image_formatIntialized) {
        throw new TypeError('Invalid argument: image_format in SaveMap_Request');
      }
      if (!this._map_modeIntialized) {
        throw new TypeError('Invalid argument: map_mode in SaveMap_Request');
      }
      if (!this._free_threshIntialized) {
        throw new TypeError('Invalid argument: free_thresh in SaveMap_Request');
      }
      if (!this._occupied_threshIntialized) {
        throw new TypeError('Invalid argument: occupied_thresh in SaveMap_Request');
      }
    }
    if (own) {
      this._wrapperFields.map_topic.freeze(own, checkConsistency);
    }
    this._refObject.map_topic = this._wrapperFields.map_topic.refObject;
    if (own) {
      this._wrapperFields.map_url.freeze(own, checkConsistency);
    }
    this._refObject.map_url = this._wrapperFields.map_url.refObject;
    if (own) {
      this._wrapperFields.image_format.freeze(own, checkConsistency);
    }
    this._refObject.image_format = this._wrapperFields.image_format.refObject;
    if (own) {
      this._wrapperFields.map_mode.freeze(own, checkConsistency);
    }
    this._refObject.map_mode = this._wrapperFields.map_mode.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._map_topicIntialized = true;
    this._wrapperFields.map_topic.data = refObject.map_topic.data;
    this._map_urlIntialized = true;
    this._wrapperFields.map_url.data = refObject.map_url.data;
    this._image_formatIntialized = true;
    this._wrapperFields.image_format.data = refObject.image_format.data;
    this._map_modeIntialized = true;
    this._wrapperFields.map_mode.data = refObject.map_mode.data;
    this._free_threshIntialized = true;
    this._refObject.free_thresh = refObject.free_thresh;
    this._occupied_threshIntialized = true;
    this._refObject.occupied_thresh = refObject.occupied_thresh;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.map_topic);
    StringWrapper.freeStruct(refObject.map_url);
    StringWrapper.freeStruct(refObject.image_format);
    StringWrapper.freeStruct(refObject.map_mode);
  }
  static destoryRawROS(msg) {
    SaveMap_RequestWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'nav2_msgs', subFolder: 'srv', interfaceName: 'SaveMap_Request'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get map_topic() {
    if (!this._map_topicIntialized) {
      return undefined;
    }
    return this._wrapperFields.map_topic.data;
  }
  set map_topic(value) {
    this._map_topicIntialized = true;
    this._wrapperFields.map_topic.data = value;
  }
  get map_url() {
    if (!this._map_urlIntialized) {
      return undefined;
    }
    return this._wrapperFields.map_url.data;
  }
  set map_url(value) {
    this._map_urlIntialized = true;
    this._wrapperFields.map_url.data = value;
  }
  get image_format() {
    if (!this._image_formatIntialized) {
      return undefined;
    }
    return this._wrapperFields.image_format.data;
  }
  set image_format(value) {
    this._image_formatIntialized = true;
    this._wrapperFields.image_format.data = value;
  }
  get map_mode() {
    if (!this._map_modeIntialized) {
      return undefined;
    }
    return this._wrapperFields.map_mode.data;
  }
  set map_mode(value) {
    this._map_modeIntialized = true;
    this._wrapperFields.map_mode.data = value;
  }
  get free_thresh() {
    if (!this._free_threshIntialized) {
      return undefined;
    }
    return this._refObject.free_thresh;
  }
  set free_thresh(value) {
    this._free_threshIntialized = true;
    this._refObject.free_thresh = value;
  }
  get occupied_thresh() {
    if (!this._occupied_threshIntialized) {
      return undefined;
    }
    return this._refObject.occupied_thresh;
  }
  set occupied_thresh(value) {
    this._occupied_threshIntialized = true;
    this._refObject.occupied_thresh = value;
  }
  copyRefObject(refObject) {
    this._refObject = new SaveMap_RequestRefStruct(refObject.toObject());
    this._map_topicIntialized = true;
    this._wrapperFields.map_topic.copyRefObject(this._refObject.map_topic);
    this._map_urlIntialized = true;
    this._wrapperFields.map_url.copyRefObject(this._refObject.map_url);
    this._image_formatIntialized = true;
    this._wrapperFields.image_format.copyRefObject(this._refObject.image_format);
    this._map_modeIntialized = true;
    this._wrapperFields.map_mode.copyRefObject(this._refObject.map_mode);
    this._free_threshIntialized = true;
    this._occupied_threshIntialized = true;
  }
  copy(other) {
    this._refObject = new SaveMap_RequestRefStruct(other._refObject.toObject());
    this._map_topicIntialized = true;
    this._wrapperFields.map_topic.copy(other._wrapperFields.map_topic);
    this._map_urlIntialized = true;
    this._wrapperFields.map_url.copy(other._wrapperFields.map_url);
    this._image_formatIntialized = true;
    this._wrapperFields.image_format.copy(other._wrapperFields.image_format);
    this._map_modeIntialized = true;
    this._wrapperFields.map_mode.copy(other._wrapperFields.map_mode);
    this._free_threshIntialized = true;
    this._occupied_threshIntialized = true;
  }
  static get classType() {
    return SaveMap_RequestWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"map_topic","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"map_url","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"image_format","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"map_mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"free_thresh","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"occupied_thresh","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"nav2_msgs","type":"SaveMap_Request","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SaveMap_Request"};
  }
  hasMember(name) {
    let memberNames = ["map_topic","map_url","image_format","map_mode","free_thresh","occupied_thresh"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SaveMap_RequestArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SaveMap_RequestWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SaveMap_RequestWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SaveMap_RequestArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SaveMap_RequestArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SaveMap_RequestRefArray(size);
    this._refObject = new SaveMap_RequestRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SaveMap_RequestWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SaveMap_RequestArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SaveMap_RequestArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SaveMap_RequestWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SaveMap_RequestWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SaveMap_RequestArrayWrapper;
  }
}
module.exports = SaveMap_RequestWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "map_topic",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "map_url",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "image_format",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "map_mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "free_thresh",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "occupied_thresh",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "nav2_msgs",
    "type": "SaveMap_Request",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SaveMap_Request"
}
*/
