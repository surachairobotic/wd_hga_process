// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const SpawnModel_RequestRefStruct = StructType({
  model_name: primitiveTypes.string,
  model_xml: primitiveTypes.string,
  robot_namespace: primitiveTypes.string,
  initial_pose: PoseWrapper.refObjectType,
  reference_frame: primitiveTypes.string,
});
const SpawnModel_RequestRefArray = ArrayType(SpawnModel_RequestRefStruct);
const SpawnModel_RequestRefStructArray = StructType({
  data: SpawnModel_RequestRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SpawnModel_RequestWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SpawnModel_RequestRefStruct(other._refObject.toObject());
      this._model_nameIntialized = true;
      this._wrapperFields.model_name =  new StringWrapper(other._wrapperFields.model_name);
      this._model_xmlIntialized = true;
      this._wrapperFields.model_xml =  new StringWrapper(other._wrapperFields.model_xml);
      this._robot_namespaceIntialized = true;
      this._wrapperFields.robot_namespace =  new StringWrapper(other._wrapperFields.robot_namespace);
      this._wrapperFields.initial_pose =  new PoseWrapper(other._wrapperFields.initial_pose);
      this._reference_frameIntialized = true;
      this._wrapperFields.reference_frame =  new StringWrapper(other._wrapperFields.reference_frame);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SpawnModel_RequestRefStruct();
    this._model_nameIntialized = false;
    this._wrapperFields.model_name = new StringWrapper();
    this._model_xmlIntialized = false;
    this._wrapperFields.model_xml = new StringWrapper();
    this._robot_namespaceIntialized = false;
    this._wrapperFields.robot_namespace = new StringWrapper();
    this._wrapperFields.initial_pose = new PoseWrapper();
    this._reference_frameIntialized = false;
    this._wrapperFields.reference_frame = new StringWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new SpawnModel_RequestWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SpawnModel_RequestArrayWrapper;
  }
  static get ArrayType() {
    return SpawnModel_RequestArrayWrapper;
  }
  static get refObjectArrayType() {
    return SpawnModel_RequestRefStructArray
  }
  static get refObjectType() {
    return SpawnModel_RequestRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._model_nameIntialized) {
        throw new TypeError('Invalid argument: model_name in SpawnModel_Request');
      }
      if (!this._model_xmlIntialized) {
        throw new TypeError('Invalid argument: model_xml in SpawnModel_Request');
      }
      if (!this._robot_namespaceIntialized) {
        throw new TypeError('Invalid argument: robot_namespace in SpawnModel_Request');
      }
      if (!this._reference_frameIntialized) {
        throw new TypeError('Invalid argument: reference_frame in SpawnModel_Request');
      }
    }
    if (own) {
      this._wrapperFields.model_name.freeze(own, checkConsistency);
    }
    this._refObject.model_name = this._wrapperFields.model_name.refObject;
    if (own) {
      this._wrapperFields.model_xml.freeze(own, checkConsistency);
    }
    this._refObject.model_xml = this._wrapperFields.model_xml.refObject;
    if (own) {
      this._wrapperFields.robot_namespace.freeze(own, checkConsistency);
    }
    this._refObject.robot_namespace = this._wrapperFields.robot_namespace.refObject;
    this._wrapperFields.initial_pose.freeze(own, checkConsistency);
    this._refObject.initial_pose = this._wrapperFields.initial_pose.refObject;
    if (own) {
      this._wrapperFields.reference_frame.freeze(own, checkConsistency);
    }
    this._refObject.reference_frame = this._wrapperFields.reference_frame.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._model_nameIntialized = true;
    this._wrapperFields.model_name.data = refObject.model_name.data;
    this._model_xmlIntialized = true;
    this._wrapperFields.model_xml.data = refObject.model_xml.data;
    this._robot_namespaceIntialized = true;
    this._wrapperFields.robot_namespace.data = refObject.robot_namespace.data;
    this._wrapperFields.initial_pose.copyRefObject(refObject.initial_pose);
    this._reference_frameIntialized = true;
    this._wrapperFields.reference_frame.data = refObject.reference_frame.data;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.model_name);
    StringWrapper.freeStruct(refObject.model_xml);
    StringWrapper.freeStruct(refObject.robot_namespace);
    PoseWrapper.freeStruct(refObject.initial_pose);
    StringWrapper.freeStruct(refObject.reference_frame);
  }
  static destoryRawROS(msg) {
    SpawnModel_RequestWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'gazebo_msgs', subFolder: 'srv', interfaceName: 'SpawnModel_Request'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get model_name() {
    if (!this._model_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.model_name.data;
  }
  set model_name(value) {
    this._model_nameIntialized = true;
    this._wrapperFields.model_name.data = value;
  }
  get model_xml() {
    if (!this._model_xmlIntialized) {
      return undefined;
    }
    return this._wrapperFields.model_xml.data;
  }
  set model_xml(value) {
    this._model_xmlIntialized = true;
    this._wrapperFields.model_xml.data = value;
  }
  get robot_namespace() {
    if (!this._robot_namespaceIntialized) {
      return undefined;
    }
    return this._wrapperFields.robot_namespace.data;
  }
  set robot_namespace(value) {
    this._robot_namespaceIntialized = true;
    this._wrapperFields.robot_namespace.data = value;
  }
  get initial_pose() {
    return this._wrapperFields.initial_pose;
  }
  set initial_pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.initial_pose.copy(value);
    } else {
      this._wrapperFields.initial_pose.copy(new PoseWrapper(value));
    }
  }
  get reference_frame() {
    if (!this._reference_frameIntialized) {
      return undefined;
    }
    return this._wrapperFields.reference_frame.data;
  }
  set reference_frame(value) {
    this._reference_frameIntialized = true;
    this._wrapperFields.reference_frame.data = value;
  }
  copyRefObject(refObject) {
    this._refObject = new SpawnModel_RequestRefStruct(refObject.toObject());
    this._model_nameIntialized = true;
    this._wrapperFields.model_name.copyRefObject(this._refObject.model_name);
    this._model_xmlIntialized = true;
    this._wrapperFields.model_xml.copyRefObject(this._refObject.model_xml);
    this._robot_namespaceIntialized = true;
    this._wrapperFields.robot_namespace.copyRefObject(this._refObject.robot_namespace);
    this._wrapperFields.initial_pose.copyRefObject(this._refObject.initial_pose);
    this._reference_frameIntialized = true;
    this._wrapperFields.reference_frame.copyRefObject(this._refObject.reference_frame);
  }
  copy(other) {
    this._refObject = new SpawnModel_RequestRefStruct(other._refObject.toObject());
    this._model_nameIntialized = true;
    this._wrapperFields.model_name.copy(other._wrapperFields.model_name);
    this._model_xmlIntialized = true;
    this._wrapperFields.model_xml.copy(other._wrapperFields.model_xml);
    this._robot_namespaceIntialized = true;
    this._wrapperFields.robot_namespace.copy(other._wrapperFields.robot_namespace);
    this._wrapperFields.initial_pose.copy(other._wrapperFields.initial_pose);
    this._reference_frameIntialized = true;
    this._wrapperFields.reference_frame.copy(other._wrapperFields.reference_frame);
  }
  static get classType() {
    return SpawnModel_RequestWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"model_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"model_xml","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"robot_namespace","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"initial_pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"reference_frame","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"gazebo_msgs","type":"SpawnModel_Request","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SpawnModel_Request"};
  }
  hasMember(name) {
    let memberNames = ["model_name","model_xml","robot_namespace","initial_pose","reference_frame"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SpawnModel_RequestArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SpawnModel_RequestWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SpawnModel_RequestWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SpawnModel_RequestArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SpawnModel_RequestArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SpawnModel_RequestRefArray(size);
    this._refObject = new SpawnModel_RequestRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SpawnModel_RequestWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SpawnModel_RequestArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SpawnModel_RequestArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SpawnModel_RequestWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SpawnModel_RequestWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SpawnModel_RequestArrayWrapper;
  }
}
module.exports = SpawnModel_RequestWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "model_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "model_xml",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "robot_namespace",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "initial_pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "reference_frame",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "gazebo_msgs",
    "type": "SpawnModel_Request",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SpawnModel_Request"
}
*/
