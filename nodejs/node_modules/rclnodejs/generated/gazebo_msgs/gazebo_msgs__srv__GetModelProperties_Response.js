// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const GetModelProperties_ResponseRefStruct = StructType({
  parent_model_name: primitiveTypes.string,
  canonical_body_name: primitiveTypes.string,
  body_names: StringWrapper.refObjectArrayType,
  geom_names: StringWrapper.refObjectArrayType,
  joint_names: StringWrapper.refObjectArrayType,
  child_model_names: StringWrapper.refObjectArrayType,
  is_static: primitiveTypes.bool,
  success: primitiveTypes.bool,
  status_message: primitiveTypes.string,
});
const GetModelProperties_ResponseRefArray = ArrayType(GetModelProperties_ResponseRefStruct);
const GetModelProperties_ResponseRefStructArray = StructType({
  data: GetModelProperties_ResponseRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class GetModelProperties_ResponseWrapper {
  constructor(other) {
    this._wrapperFields = {};
    this._body_namesArray = [];
    this._geom_namesArray = [];
    this._joint_namesArray = [];
    this._child_model_namesArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new GetModelProperties_ResponseRefStruct(other._refObject.toObject());
      this._parent_model_nameIntialized = true;
      this._wrapperFields.parent_model_name =  new StringWrapper(other._wrapperFields.parent_model_name);
      this._canonical_body_nameIntialized = true;
      this._wrapperFields.canonical_body_name =  new StringWrapper(other._wrapperFields.canonical_body_name);
      this._wrapperFields.body_names = StringWrapper.createArray();
      this._wrapperFields.body_names.copy(other._wrapperFields.body_names);
      this.body_names = other.body_names;
      this._wrapperFields.geom_names = StringWrapper.createArray();
      this._wrapperFields.geom_names.copy(other._wrapperFields.geom_names);
      this.geom_names = other.geom_names;
      this._wrapperFields.joint_names = StringWrapper.createArray();
      this._wrapperFields.joint_names.copy(other._wrapperFields.joint_names);
      this.joint_names = other.joint_names;
      this._wrapperFields.child_model_names = StringWrapper.createArray();
      this._wrapperFields.child_model_names.copy(other._wrapperFields.child_model_names);
      this.child_model_names = other.child_model_names;
      this._is_staticIntialized = true;
      this._successIntialized = true;
      this._status_messageIntialized = true;
      this._wrapperFields.status_message =  new StringWrapper(other._wrapperFields.status_message);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new GetModelProperties_ResponseRefStruct();
    this._parent_model_nameIntialized = false;
    this._wrapperFields.parent_model_name = new StringWrapper();
    this._canonical_body_nameIntialized = false;
    this._wrapperFields.canonical_body_name = new StringWrapper();
    this._wrapperFields.body_names = StringWrapper.createArray();
    this._wrapperFields.geom_names = StringWrapper.createArray();
    this._wrapperFields.joint_names = StringWrapper.createArray();
    this._wrapperFields.child_model_names = StringWrapper.createArray();
    this._is_staticIntialized = false;
    this._successIntialized = false;
    this._status_messageIntialized = false;
    this._wrapperFields.status_message = new StringWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new GetModelProperties_ResponseWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new GetModelProperties_ResponseArrayWrapper;
  }
  static get ArrayType() {
    return GetModelProperties_ResponseArrayWrapper;
  }
  static get refObjectArrayType() {
    return GetModelProperties_ResponseRefStructArray
  }
  static get refObjectType() {
    return GetModelProperties_ResponseRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._parent_model_nameIntialized) {
        throw new TypeError('Invalid argument: parent_model_name in GetModelProperties_Response');
      }
      if (!this._canonical_body_nameIntialized) {
        throw new TypeError('Invalid argument: canonical_body_name in GetModelProperties_Response');
      }
      if (!this._is_staticIntialized) {
        throw new TypeError('Invalid argument: is_static in GetModelProperties_Response');
      }
      if (!this._successIntialized) {
        throw new TypeError('Invalid argument: success in GetModelProperties_Response');
      }
      if (!this._status_messageIntialized) {
        throw new TypeError('Invalid argument: status_message in GetModelProperties_Response');
      }
    }
    if (own) {
      this._wrapperFields.parent_model_name.freeze(own, checkConsistency);
    }
    this._refObject.parent_model_name = this._wrapperFields.parent_model_name.refObject;
    if (own) {
      this._wrapperFields.canonical_body_name.freeze(own, checkConsistency);
    }
    this._refObject.canonical_body_name = this._wrapperFields.canonical_body_name.refObject;
    if (!own) {
      this._wrapperFields.body_names.fill(this._body_namesArray);
      this._wrapperFields.body_names.freeze(own, checkConsistency);
      this._refObject.body_names = this._wrapperFields.body_names.refObject;
    } else {
      this._wrapperFields.body_names.fill([]);
      this._wrapperFields.body_names.freeze(own, checkConsistency);
      this._refObject.body_names = this._wrapperFields.body_names.refObject;
    }
    if (!own) {
      this._wrapperFields.geom_names.fill(this._geom_namesArray);
      this._wrapperFields.geom_names.freeze(own, checkConsistency);
      this._refObject.geom_names = this._wrapperFields.geom_names.refObject;
    } else {
      this._wrapperFields.geom_names.fill([]);
      this._wrapperFields.geom_names.freeze(own, checkConsistency);
      this._refObject.geom_names = this._wrapperFields.geom_names.refObject;
    }
    if (!own) {
      this._wrapperFields.joint_names.fill(this._joint_namesArray);
      this._wrapperFields.joint_names.freeze(own, checkConsistency);
      this._refObject.joint_names = this._wrapperFields.joint_names.refObject;
    } else {
      this._wrapperFields.joint_names.fill([]);
      this._wrapperFields.joint_names.freeze(own, checkConsistency);
      this._refObject.joint_names = this._wrapperFields.joint_names.refObject;
    }
    if (!own) {
      this._wrapperFields.child_model_names.fill(this._child_model_namesArray);
      this._wrapperFields.child_model_names.freeze(own, checkConsistency);
      this._refObject.child_model_names = this._wrapperFields.child_model_names.refObject;
    } else {
      this._wrapperFields.child_model_names.fill([]);
      this._wrapperFields.child_model_names.freeze(own, checkConsistency);
      this._refObject.child_model_names = this._wrapperFields.child_model_names.refObject;
    }
    if (own) {
      this._wrapperFields.status_message.freeze(own, checkConsistency);
    }
    this._refObject.status_message = this._wrapperFields.status_message.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._parent_model_nameIntialized = true;
    this._wrapperFields.parent_model_name.data = refObject.parent_model_name.data;
    this._canonical_body_nameIntialized = true;
    this._wrapperFields.canonical_body_name.data = refObject.canonical_body_name.data;
    refObject.body_names.data.length = refObject.body_names.size;
    for (let index = 0; index < refObject.body_names.size; index++) {
      this._body_namesArray[index] = refObject.body_names.data[index].data;
    }
    refObject.geom_names.data.length = refObject.geom_names.size;
    for (let index = 0; index < refObject.geom_names.size; index++) {
      this._geom_namesArray[index] = refObject.geom_names.data[index].data;
    }
    refObject.joint_names.data.length = refObject.joint_names.size;
    for (let index = 0; index < refObject.joint_names.size; index++) {
      this._joint_namesArray[index] = refObject.joint_names.data[index].data;
    }
    refObject.child_model_names.data.length = refObject.child_model_names.size;
    for (let index = 0; index < refObject.child_model_names.size; index++) {
      this._child_model_namesArray[index] = refObject.child_model_names.data[index].data;
    }
    this._is_staticIntialized = true;
    this._refObject.is_static = refObject.is_static;
    this._successIntialized = true;
    this._refObject.success = refObject.success;
    this._status_messageIntialized = true;
    this._wrapperFields.status_message.data = refObject.status_message.data;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.parent_model_name);
    StringWrapper.freeStruct(refObject.canonical_body_name);
    if (refObject.body_names.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.body_names);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.body_names, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.geom_names.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.geom_names);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.geom_names, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.joint_names.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.joint_names);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.joint_names, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.child_model_names.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.child_model_names);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.child_model_names, StringWrapper.refObjectArrayType, 'data');
      }
    }
    StringWrapper.freeStruct(refObject.status_message);
  }
  static destoryRawROS(msg) {
    GetModelProperties_ResponseWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'gazebo_msgs', subFolder: 'srv', interfaceName: 'GetModelProperties_Response'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get parent_model_name() {
    if (!this._parent_model_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.parent_model_name.data;
  }
  set parent_model_name(value) {
    this._parent_model_nameIntialized = true;
    this._wrapperFields.parent_model_name.data = value;
  }
  get canonical_body_name() {
    if (!this._canonical_body_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.canonical_body_name.data;
  }
  set canonical_body_name(value) {
    this._canonical_body_nameIntialized = true;
    this._wrapperFields.canonical_body_name.data = value;
  }
  get body_names() {
    return this._body_namesArray;
  }
  set body_names(value) {
    this._body_namesArray = value;
  }
  get geom_names() {
    return this._geom_namesArray;
  }
  set geom_names(value) {
    this._geom_namesArray = value;
  }
  get joint_names() {
    return this._joint_namesArray;
  }
  set joint_names(value) {
    this._joint_namesArray = value;
  }
  get child_model_names() {
    return this._child_model_namesArray;
  }
  set child_model_names(value) {
    this._child_model_namesArray = value;
  }
  get is_static() {
    if (!this._is_staticIntialized) {
      return undefined;
    }
    return this._refObject.is_static;
  }
  set is_static(value) {
    this._is_staticIntialized = true;
    this._refObject.is_static = value;
  }
  get success() {
    if (!this._successIntialized) {
      return undefined;
    }
    return this._refObject.success;
  }
  set success(value) {
    this._successIntialized = true;
    this._refObject.success = value;
  }
  get status_message() {
    if (!this._status_messageIntialized) {
      return undefined;
    }
    return this._wrapperFields.status_message.data;
  }
  set status_message(value) {
    this._status_messageIntialized = true;
    this._wrapperFields.status_message.data = value;
  }
  copyRefObject(refObject) {
    this._refObject = new GetModelProperties_ResponseRefStruct(refObject.toObject());
    this._parent_model_nameIntialized = true;
    this._wrapperFields.parent_model_name.copyRefObject(this._refObject.parent_model_name);
    this._canonical_body_nameIntialized = true;
    this._wrapperFields.canonical_body_name.copyRefObject(this._refObject.canonical_body_name);
    refObject.body_names.data.length = refObject.body_names.size;
    for (let index = 0; index < refObject.body_names.size; index++) {
      this._body_namesArray[index] = refObject.body_names.data[index].data;
    }
    refObject.geom_names.data.length = refObject.geom_names.size;
    for (let index = 0; index < refObject.geom_names.size; index++) {
      this._geom_namesArray[index] = refObject.geom_names.data[index].data;
    }
    refObject.joint_names.data.length = refObject.joint_names.size;
    for (let index = 0; index < refObject.joint_names.size; index++) {
      this._joint_namesArray[index] = refObject.joint_names.data[index].data;
    }
    refObject.child_model_names.data.length = refObject.child_model_names.size;
    for (let index = 0; index < refObject.child_model_names.size; index++) {
      this._child_model_namesArray[index] = refObject.child_model_names.data[index].data;
    }
    this._is_staticIntialized = true;
    this._successIntialized = true;
    this._status_messageIntialized = true;
    this._wrapperFields.status_message.copyRefObject(this._refObject.status_message);
  }
  copy(other) {
    this._refObject = new GetModelProperties_ResponseRefStruct(other._refObject.toObject());
    this._parent_model_nameIntialized = true;
    this._wrapperFields.parent_model_name.copy(other._wrapperFields.parent_model_name);
    this._canonical_body_nameIntialized = true;
    this._wrapperFields.canonical_body_name.copy(other._wrapperFields.canonical_body_name);
    this._body_namesArray = other._body_namesArray.slice();
    this._geom_namesArray = other._geom_namesArray.slice();
    this._joint_namesArray = other._joint_namesArray.slice();
    this._child_model_namesArray = other._child_model_namesArray.slice();
    this._is_staticIntialized = true;
    this._successIntialized = true;
    this._status_messageIntialized = true;
    this._wrapperFields.status_message.copy(other._wrapperFields.status_message);
  }
  static get classType() {
    return GetModelProperties_ResponseWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"parent_model_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"canonical_body_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"body_names","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"geom_names","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"joint_names","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"child_model_names","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"is_static","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"success","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"status_message","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"gazebo_msgs","type":"GetModelProperties_Response","stringUpperBound":null,"isPrimitiveType":false},"msgName":"GetModelProperties_Response"};
  }
  hasMember(name) {
    let memberNames = ["parent_model_name","canonical_body_name","body_names","geom_names","joint_names","child_model_names","is_static","success","status_message"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class GetModelProperties_ResponseArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof GetModelProperties_ResponseWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new GetModelProperties_ResponseWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GetModelProperties_ResponseArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GetModelProperties_ResponseArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new GetModelProperties_ResponseRefArray(size);
    this._refObject = new GetModelProperties_ResponseRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new GetModelProperties_ResponseWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof GetModelProperties_ResponseArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "GetModelProperties_ResponseArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      GetModelProperties_ResponseWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return GetModelProperties_ResponseWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return GetModelProperties_ResponseArrayWrapper;
  }
}
module.exports = GetModelProperties_ResponseWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "parent_model_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "canonical_body_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "body_names",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "geom_names",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "joint_names",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "child_model_names",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "is_static",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "success",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "status_message",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "gazebo_msgs",
    "type": "GetModelProperties_Response",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "GetModelProperties_Response"
}
*/
