// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const DurationWrapper = require('../../generated/builtin_interfaces/builtin_interfaces__msg__Duration.js');
const SwitchController_RequestRefStruct = StructType({
  start_controllers: StringWrapper.refObjectArrayType,
  stop_controllers: StringWrapper.refObjectArrayType,
  strictness: primitiveTypes.int32,
  start_asap: primitiveTypes.bool,
  timeout: DurationWrapper.refObjectType,
});
const SwitchController_RequestRefArray = ArrayType(SwitchController_RequestRefStruct);
const SwitchController_RequestRefStructArray = StructType({
  data: SwitchController_RequestRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SwitchController_RequestWrapper {
  constructor(other) {
    this._wrapperFields = {};
    this._start_controllersArray = [];
    this._stop_controllersArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SwitchController_RequestRefStruct(other._refObject.toObject());
      this._wrapperFields.start_controllers = StringWrapper.createArray();
      this._wrapperFields.start_controllers.copy(other._wrapperFields.start_controllers);
      this.start_controllers = other.start_controllers;
      this._wrapperFields.stop_controllers = StringWrapper.createArray();
      this._wrapperFields.stop_controllers.copy(other._wrapperFields.stop_controllers);
      this.stop_controllers = other.stop_controllers;
      this._strictnessIntialized = true;
      this._start_asapIntialized = true;
      this._wrapperFields.timeout =  new DurationWrapper(other._wrapperFields.timeout);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SwitchController_RequestRefStruct();
    this._wrapperFields.start_controllers = StringWrapper.createArray();
    this._wrapperFields.stop_controllers = StringWrapper.createArray();
    this._strictnessIntialized = false;
    this._start_asapIntialized = false;
    this._wrapperFields.timeout = new DurationWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new SwitchController_RequestWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SwitchController_RequestArrayWrapper;
  }
  static get ArrayType() {
    return SwitchController_RequestArrayWrapper;
  }
  static get refObjectArrayType() {
    return SwitchController_RequestRefStructArray
  }
  static get refObjectType() {
    return SwitchController_RequestRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._strictnessIntialized) {
        throw new TypeError('Invalid argument: strictness in SwitchController_Request');
      }
      if (!this._start_asapIntialized) {
        throw new TypeError('Invalid argument: start_asap in SwitchController_Request');
      }
    }
    if (!own) {
      this._wrapperFields.start_controllers.fill(this._start_controllersArray);
      this._wrapperFields.start_controllers.freeze(own, checkConsistency);
      this._refObject.start_controllers = this._wrapperFields.start_controllers.refObject;
    } else {
      this._wrapperFields.start_controllers.fill([]);
      this._wrapperFields.start_controllers.freeze(own, checkConsistency);
      this._refObject.start_controllers = this._wrapperFields.start_controllers.refObject;
    }
    if (!own) {
      this._wrapperFields.stop_controllers.fill(this._stop_controllersArray);
      this._wrapperFields.stop_controllers.freeze(own, checkConsistency);
      this._refObject.stop_controllers = this._wrapperFields.stop_controllers.refObject;
    } else {
      this._wrapperFields.stop_controllers.fill([]);
      this._wrapperFields.stop_controllers.freeze(own, checkConsistency);
      this._refObject.stop_controllers = this._wrapperFields.stop_controllers.refObject;
    }
    this._wrapperFields.timeout.freeze(own, checkConsistency);
    this._refObject.timeout = this._wrapperFields.timeout.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    refObject.start_controllers.data.length = refObject.start_controllers.size;
    for (let index = 0; index < refObject.start_controllers.size; index++) {
      this._start_controllersArray[index] = refObject.start_controllers.data[index].data;
    }
    refObject.stop_controllers.data.length = refObject.stop_controllers.size;
    for (let index = 0; index < refObject.stop_controllers.size; index++) {
      this._stop_controllersArray[index] = refObject.stop_controllers.data[index].data;
    }
    this._strictnessIntialized = true;
    this._refObject.strictness = refObject.strictness;
    this._start_asapIntialized = true;
    this._refObject.start_asap = refObject.start_asap;
    this._wrapperFields.timeout.copyRefObject(refObject.timeout);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    if (refObject.start_controllers.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.start_controllers);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.start_controllers, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.stop_controllers.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.stop_controllers);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.stop_controllers, StringWrapper.refObjectArrayType, 'data');
      }
    }
    DurationWrapper.freeStruct(refObject.timeout);
  }
  static destoryRawROS(msg) {
    SwitchController_RequestWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'controller_manager_msgs', subFolder: 'srv', interfaceName: 'SwitchController_Request'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get start_controllers() {
    return this._start_controllersArray;
  }
  set start_controllers(value) {
    this._start_controllersArray = value;
  }
  get stop_controllers() {
    return this._stop_controllersArray;
  }
  set stop_controllers(value) {
    this._stop_controllersArray = value;
  }
  get strictness() {
    if (!this._strictnessIntialized) {
      return undefined;
    }
    return this._refObject.strictness;
  }
  set strictness(value) {
    this._strictnessIntialized = true;
    this._refObject.strictness = value;
  }
  get start_asap() {
    if (!this._start_asapIntialized) {
      return undefined;
    }
    return this._refObject.start_asap;
  }
  set start_asap(value) {
    this._start_asapIntialized = true;
    this._refObject.start_asap = value;
  }
  get timeout() {
    return this._wrapperFields.timeout;
  }
  set timeout(value) {
    if (value instanceof DurationWrapper) {
      this._wrapperFields.timeout.copy(value);
    } else {
      this._wrapperFields.timeout.copy(new DurationWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new SwitchController_RequestRefStruct(refObject.toObject());
    refObject.start_controllers.data.length = refObject.start_controllers.size;
    for (let index = 0; index < refObject.start_controllers.size; index++) {
      this._start_controllersArray[index] = refObject.start_controllers.data[index].data;
    }
    refObject.stop_controllers.data.length = refObject.stop_controllers.size;
    for (let index = 0; index < refObject.stop_controllers.size; index++) {
      this._stop_controllersArray[index] = refObject.stop_controllers.data[index].data;
    }
    this._strictnessIntialized = true;
    this._start_asapIntialized = true;
    this._wrapperFields.timeout.copyRefObject(this._refObject.timeout);
  }
  copy(other) {
    this._refObject = new SwitchController_RequestRefStruct(other._refObject.toObject());
    this._start_controllersArray = other._start_controllersArray.slice();
    this._stop_controllersArray = other._stop_controllersArray.slice();
    this._strictnessIntialized = true;
    this._start_asapIntialized = true;
    this._wrapperFields.timeout.copy(other._wrapperFields.timeout);
  }
  static get classType() {
    return SwitchController_RequestWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"int32","name":"BEST_EFFORT","value":1},{"type":"int32","name":"STRICT","value":2}],"fields":[{"name":"start_controllers","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"stop_controllers","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"strictness","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"start_asap","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"timeout","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"builtin_interfaces","type":"Duration","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"controller_manager_msgs","type":"SwitchController_Request","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SwitchController_Request"};
  }
  hasMember(name) {
    let memberNames = ["start_controllers","stop_controllers","strictness","start_asap","timeout"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SwitchController_RequestArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SwitchController_RequestWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SwitchController_RequestWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SwitchController_RequestArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SwitchController_RequestArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SwitchController_RequestRefArray(size);
    this._refObject = new SwitchController_RequestRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SwitchController_RequestWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SwitchController_RequestArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SwitchController_RequestArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SwitchController_RequestWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SwitchController_RequestWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SwitchController_RequestArrayWrapper;
  }
}
// Define constants (2 in total)
Object.defineProperty(SwitchController_RequestWrapper, "BEST_EFFORT", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SwitchController_RequestWrapper, "STRICT", {value: 2, writable: false, enumerable: true, configurable: true});
module.exports = SwitchController_RequestWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "int32",
      "name": "BEST_EFFORT",
      "value": 1
    },
    {
      "type": "int32",
      "name": "STRICT",
      "value": 2
    }
  ],
  "fields": [
    {
      "name": "start_controllers",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "stop_controllers",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "strictness",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "start_asap",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "timeout",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "builtin_interfaces",
        "type": "Duration",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "controller_manager_msgs",
    "type": "SwitchController_Request",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SwitchController_Request"
}
*/
