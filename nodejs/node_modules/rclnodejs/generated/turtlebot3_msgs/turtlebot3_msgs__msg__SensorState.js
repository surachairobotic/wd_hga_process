// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const SensorStateRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  bumper: primitiveTypes.uint8,
  cliff: primitiveTypes.float32,
  sonar: primitiveTypes.float32,
  illumination: primitiveTypes.float32,
  led: primitiveTypes.uint8,
  button: primitiveTypes.uint8,
  torque: primitiveTypes.bool,
  left_encoder: primitiveTypes.int32,
  right_encoder: primitiveTypes.int32,
  battery: primitiveTypes.float32,
});
const SensorStateRefArray = ArrayType(SensorStateRefStruct);
const SensorStateRefStructArray = StructType({
  data: SensorStateRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SensorStateWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SensorStateRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._bumperIntialized = true;
      this._cliffIntialized = true;
      this._sonarIntialized = true;
      this._illuminationIntialized = true;
      this._ledIntialized = true;
      this._buttonIntialized = true;
      this._torqueIntialized = true;
      this._left_encoderIntialized = true;
      this._right_encoderIntialized = true;
      this._batteryIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SensorStateRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._bumperIntialized = false;
    this._cliffIntialized = false;
    this._sonarIntialized = false;
    this._illuminationIntialized = false;
    this._ledIntialized = false;
    this._buttonIntialized = false;
    this._torqueIntialized = false;
    this._left_encoderIntialized = false;
    this._right_encoderIntialized = false;
    this._batteryIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new SensorStateWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SensorStateArrayWrapper;
  }
  static get ArrayType() {
    return SensorStateArrayWrapper;
  }
  static get refObjectArrayType() {
    return SensorStateRefStructArray
  }
  static get refObjectType() {
    return SensorStateRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._bumperIntialized) {
        throw new TypeError('Invalid argument: bumper in SensorState');
      }
      if (!this._cliffIntialized) {
        throw new TypeError('Invalid argument: cliff in SensorState');
      }
      if (!this._sonarIntialized) {
        throw new TypeError('Invalid argument: sonar in SensorState');
      }
      if (!this._illuminationIntialized) {
        throw new TypeError('Invalid argument: illumination in SensorState');
      }
      if (!this._ledIntialized) {
        throw new TypeError('Invalid argument: led in SensorState');
      }
      if (!this._buttonIntialized) {
        throw new TypeError('Invalid argument: button in SensorState');
      }
      if (!this._torqueIntialized) {
        throw new TypeError('Invalid argument: torque in SensorState');
      }
      if (!this._left_encoderIntialized) {
        throw new TypeError('Invalid argument: left_encoder in SensorState');
      }
      if (!this._right_encoderIntialized) {
        throw new TypeError('Invalid argument: right_encoder in SensorState');
      }
      if (!this._batteryIntialized) {
        throw new TypeError('Invalid argument: battery in SensorState');
      }
    }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._bumperIntialized = true;
    this._refObject.bumper = refObject.bumper;
    this._cliffIntialized = true;
    this._refObject.cliff = refObject.cliff;
    this._sonarIntialized = true;
    this._refObject.sonar = refObject.sonar;
    this._illuminationIntialized = true;
    this._refObject.illumination = refObject.illumination;
    this._ledIntialized = true;
    this._refObject.led = refObject.led;
    this._buttonIntialized = true;
    this._refObject.button = refObject.button;
    this._torqueIntialized = true;
    this._refObject.torque = refObject.torque;
    this._left_encoderIntialized = true;
    this._refObject.left_encoder = refObject.left_encoder;
    this._right_encoderIntialized = true;
    this._refObject.right_encoder = refObject.right_encoder;
    this._batteryIntialized = true;
    this._refObject.battery = refObject.battery;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
  }
  static destoryRawROS(msg) {
    SensorStateWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'turtlebot3_msgs', subFolder: 'msg', interfaceName: 'SensorState'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get bumper() {
    if (!this._bumperIntialized) {
      return undefined;
    }
    return this._refObject.bumper;
  }
  set bumper(value) {
    this._bumperIntialized = true;
    this._refObject.bumper = value;
  }
  get cliff() {
    if (!this._cliffIntialized) {
      return undefined;
    }
    return this._refObject.cliff;
  }
  set cliff(value) {
    this._cliffIntialized = true;
    this._refObject.cliff = value;
  }
  get sonar() {
    if (!this._sonarIntialized) {
      return undefined;
    }
    return this._refObject.sonar;
  }
  set sonar(value) {
    this._sonarIntialized = true;
    this._refObject.sonar = value;
  }
  get illumination() {
    if (!this._illuminationIntialized) {
      return undefined;
    }
    return this._refObject.illumination;
  }
  set illumination(value) {
    this._illuminationIntialized = true;
    this._refObject.illumination = value;
  }
  get led() {
    if (!this._ledIntialized) {
      return undefined;
    }
    return this._refObject.led;
  }
  set led(value) {
    this._ledIntialized = true;
    this._refObject.led = value;
  }
  get button() {
    if (!this._buttonIntialized) {
      return undefined;
    }
    return this._refObject.button;
  }
  set button(value) {
    this._buttonIntialized = true;
    this._refObject.button = value;
  }
  get torque() {
    if (!this._torqueIntialized) {
      return undefined;
    }
    return this._refObject.torque;
  }
  set torque(value) {
    this._torqueIntialized = true;
    this._refObject.torque = value;
  }
  get left_encoder() {
    if (!this._left_encoderIntialized) {
      return undefined;
    }
    return this._refObject.left_encoder;
  }
  set left_encoder(value) {
    this._left_encoderIntialized = true;
    this._refObject.left_encoder = value;
  }
  get right_encoder() {
    if (!this._right_encoderIntialized) {
      return undefined;
    }
    return this._refObject.right_encoder;
  }
  set right_encoder(value) {
    this._right_encoderIntialized = true;
    this._refObject.right_encoder = value;
  }
  get battery() {
    if (!this._batteryIntialized) {
      return undefined;
    }
    return this._refObject.battery;
  }
  set battery(value) {
    this._batteryIntialized = true;
    this._refObject.battery = value;
  }
  copyRefObject(refObject) {
    this._refObject = new SensorStateRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._bumperIntialized = true;
    this._cliffIntialized = true;
    this._sonarIntialized = true;
    this._illuminationIntialized = true;
    this._ledIntialized = true;
    this._buttonIntialized = true;
    this._torqueIntialized = true;
    this._left_encoderIntialized = true;
    this._right_encoderIntialized = true;
    this._batteryIntialized = true;
  }
  copy(other) {
    this._refObject = new SensorStateRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._bumperIntialized = true;
    this._cliffIntialized = true;
    this._sonarIntialized = true;
    this._illuminationIntialized = true;
    this._ledIntialized = true;
    this._buttonIntialized = true;
    this._torqueIntialized = true;
    this._left_encoderIntialized = true;
    this._right_encoderIntialized = true;
    this._batteryIntialized = true;
  }
  static get classType() {
    return SensorStateWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"BUMPER_FORWARD","value":1},{"type":"uint8","name":"BUMPER_BACKWARD","value":2},{"type":"uint8","name":"CLIFF","value":1},{"type":"uint8","name":"SONAR","value":1},{"type":"uint8","name":"ILLUMINATION","value":1},{"type":"uint8","name":"BUTTON0","value":1},{"type":"uint8","name":"BUTTON1","value":2},{"type":"uint8","name":"ERROR_LEFT_MOTOR","value":1},{"type":"uint8","name":"ERROR_RIGHT_MOTOR","value":2},{"type":"uint8","name":"TORQUE_ON","value":1},{"type":"uint8","name":"TORQUE_OFF","value":2}],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"bumper","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cliff","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"sonar","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"illumination","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"led","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"button","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"torque","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"left_encoder","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"right_encoder","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"battery","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"turtlebot3_msgs","type":"SensorState","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SensorState"};
  }
  hasMember(name) {
    let memberNames = ["header","bumper","cliff","sonar","illumination","led","button","torque","left_encoder","right_encoder","battery"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SensorStateArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SensorStateWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SensorStateWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorStateArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorStateArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SensorStateRefArray(size);
    this._refObject = new SensorStateRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SensorStateWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SensorStateArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SensorStateArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SensorStateWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SensorStateWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SensorStateArrayWrapper;
  }
}
// Define constants (11 in total)
Object.defineProperty(SensorStateWrapper, "BUMPER_FORWARD", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "BUMPER_BACKWARD", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "CLIFF", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "SONAR", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "ILLUMINATION", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "BUTTON0", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "BUTTON1", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "ERROR_LEFT_MOTOR", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "ERROR_RIGHT_MOTOR", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "TORQUE_ON", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorStateWrapper, "TORQUE_OFF", {value: 2, writable: false, enumerable: true, configurable: true});
module.exports = SensorStateWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "BUMPER_FORWARD",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "BUMPER_BACKWARD",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "CLIFF",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "SONAR",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "ILLUMINATION",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "BUTTON0",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "BUTTON1",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "ERROR_LEFT_MOTOR",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "ERROR_RIGHT_MOTOR",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "TORQUE_ON",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "TORQUE_OFF",
      "value": 2
    }
  ],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "bumper",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cliff",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "sonar",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "illumination",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "led",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "button",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "torque",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "left_encoder",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "right_encoder",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "battery",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "turtlebot3_msgs",
    "type": "SensorState",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SensorState"
}
*/
