// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const Int32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Int32.js');
const TypeDefRefStruct = StructType({
  type: primitiveTypes.string,
  fieldnames: StringWrapper.refObjectArrayType,
  fieldtypes: StringWrapper.refObjectArrayType,
  fieldarraylen: Int32Wrapper.refObjectArrayType,
  examples: StringWrapper.refObjectArrayType,
  constnames: StringWrapper.refObjectArrayType,
  constvalues: StringWrapper.refObjectArrayType,
});
const TypeDefRefArray = ArrayType(TypeDefRefStruct);
const TypeDefRefStructArray = StructType({
  data: TypeDefRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class TypeDefWrapper {
  constructor(other) {
    this._wrapperFields = {};
    this._fieldnamesArray = [];
    this._fieldtypesArray = [];
    this._examplesArray = [];
    this._constnamesArray = [];
    this._constvaluesArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new TypeDefRefStruct(other._refObject.toObject());
      this._typeIntialized = true;
      this._wrapperFields.type =  new StringWrapper(other._wrapperFields.type);
      this._wrapperFields.fieldnames = StringWrapper.createArray();
      this._wrapperFields.fieldnames.copy(other._wrapperFields.fieldnames);
      this.fieldnames = other.fieldnames;
      this._wrapperFields.fieldtypes = StringWrapper.createArray();
      this._wrapperFields.fieldtypes.copy(other._wrapperFields.fieldtypes);
      this.fieldtypes = other.fieldtypes;
      this._wrapperFields.fieldarraylen = Int32Wrapper.createArray();
      this._wrapperFields.fieldarraylen.copy(other._wrapperFields.fieldarraylen);
      this._wrapperFields.examples = StringWrapper.createArray();
      this._wrapperFields.examples.copy(other._wrapperFields.examples);
      this.examples = other.examples;
      this._wrapperFields.constnames = StringWrapper.createArray();
      this._wrapperFields.constnames.copy(other._wrapperFields.constnames);
      this.constnames = other.constnames;
      this._wrapperFields.constvalues = StringWrapper.createArray();
      this._wrapperFields.constvalues.copy(other._wrapperFields.constvalues);
      this.constvalues = other.constvalues;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new TypeDefRefStruct();
    this._typeIntialized = false;
    this._wrapperFields.type = new StringWrapper();
    this._wrapperFields.fieldnames = StringWrapper.createArray();
    this._wrapperFields.fieldtypes = StringWrapper.createArray();
    this._wrapperFields.fieldarraylen = Int32Wrapper.createArray();
    this._wrapperFields.examples = StringWrapper.createArray();
    this._wrapperFields.constnames = StringWrapper.createArray();
    this._wrapperFields.constvalues = StringWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new TypeDefWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new TypeDefArrayWrapper;
  }
  static get ArrayType() {
    return TypeDefArrayWrapper;
  }
  static get refObjectArrayType() {
    return TypeDefRefStructArray
  }
  static get refObjectType() {
    return TypeDefRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._typeIntialized) {
        throw new TypeError('Invalid argument: type in TypeDef');
      }
    }
    if (own) {
      this._wrapperFields.type.freeze(own, checkConsistency);
    }
    this._refObject.type = this._wrapperFields.type.refObject;
    if (!own) {
      this._wrapperFields.fieldnames.fill(this._fieldnamesArray);
      this._wrapperFields.fieldnames.freeze(own, checkConsistency);
      this._refObject.fieldnames = this._wrapperFields.fieldnames.refObject;
    } else {
      this._wrapperFields.fieldnames.fill([]);
      this._wrapperFields.fieldnames.freeze(own, checkConsistency);
      this._refObject.fieldnames = this._wrapperFields.fieldnames.refObject;
    }
    if (!own) {
      this._wrapperFields.fieldtypes.fill(this._fieldtypesArray);
      this._wrapperFields.fieldtypes.freeze(own, checkConsistency);
      this._refObject.fieldtypes = this._wrapperFields.fieldtypes.refObject;
    } else {
      this._wrapperFields.fieldtypes.fill([]);
      this._wrapperFields.fieldtypes.freeze(own, checkConsistency);
      this._refObject.fieldtypes = this._wrapperFields.fieldtypes.refObject;
    }
    this._wrapperFields.fieldarraylen.freeze(own, checkConsistency);
    this._refObject.fieldarraylen = this._wrapperFields.fieldarraylen.refObject;
    if (own) {
      this._wrapperFields.fieldarraylen.fill(Int32Array.from([]));
      this._wrapperFields.fieldarraylen.freeze(own, checkConsistency);
      this._refObject.fieldarraylen = this._wrapperFields.fieldarraylen.refObject;
    }
    if (!own) {
      this._wrapperFields.examples.fill(this._examplesArray);
      this._wrapperFields.examples.freeze(own, checkConsistency);
      this._refObject.examples = this._wrapperFields.examples.refObject;
    } else {
      this._wrapperFields.examples.fill([]);
      this._wrapperFields.examples.freeze(own, checkConsistency);
      this._refObject.examples = this._wrapperFields.examples.refObject;
    }
    if (!own) {
      this._wrapperFields.constnames.fill(this._constnamesArray);
      this._wrapperFields.constnames.freeze(own, checkConsistency);
      this._refObject.constnames = this._wrapperFields.constnames.refObject;
    } else {
      this._wrapperFields.constnames.fill([]);
      this._wrapperFields.constnames.freeze(own, checkConsistency);
      this._refObject.constnames = this._wrapperFields.constnames.refObject;
    }
    if (!own) {
      this._wrapperFields.constvalues.fill(this._constvaluesArray);
      this._wrapperFields.constvalues.freeze(own, checkConsistency);
      this._refObject.constvalues = this._wrapperFields.constvalues.refObject;
    } else {
      this._wrapperFields.constvalues.fill([]);
      this._wrapperFields.constvalues.freeze(own, checkConsistency);
      this._refObject.constvalues = this._wrapperFields.constvalues.refObject;
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._typeIntialized = true;
    this._wrapperFields.type.data = refObject.type.data;
    refObject.fieldnames.data.length = refObject.fieldnames.size;
    for (let index = 0; index < refObject.fieldnames.size; index++) {
      this._fieldnamesArray[index] = refObject.fieldnames.data[index].data;
    }
    refObject.fieldtypes.data.length = refObject.fieldtypes.size;
    for (let index = 0; index < refObject.fieldtypes.size; index++) {
      this._fieldtypesArray[index] = refObject.fieldtypes.data[index].data;
    }
    this._wrapperFields.fieldarraylen.copyRefObject(refObject.fieldarraylen);
    refObject.examples.data.length = refObject.examples.size;
    for (let index = 0; index < refObject.examples.size; index++) {
      this._examplesArray[index] = refObject.examples.data[index].data;
    }
    refObject.constnames.data.length = refObject.constnames.size;
    for (let index = 0; index < refObject.constnames.size; index++) {
      this._constnamesArray[index] = refObject.constnames.data[index].data;
    }
    refObject.constvalues.data.length = refObject.constvalues.size;
    for (let index = 0; index < refObject.constvalues.size; index++) {
      this._constvaluesArray[index] = refObject.constvalues.data[index].data;
    }
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.type);
    if (refObject.fieldnames.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.fieldnames);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.fieldnames, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.fieldtypes.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.fieldtypes);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.fieldtypes, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.fieldarraylen.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.fieldarraylen);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.fieldarraylen, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.examples.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.examples);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.examples, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.constnames.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.constnames);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.constnames, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.constvalues.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.constvalues);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.constvalues, StringWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    TypeDefWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rosapi_msgs', subFolder: 'msg', interfaceName: 'TypeDef'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._wrapperFields.type.data;
  }
  set type(value) {
    this._typeIntialized = true;
    this._wrapperFields.type.data = value;
  }
  get fieldnames() {
    return this._fieldnamesArray;
  }
  set fieldnames(value) {
    this._fieldnamesArray = value;
  }
  get fieldtypes() {
    return this._fieldtypesArray;
  }
  set fieldtypes(value) {
    this._fieldtypesArray = value;
  }
  get fieldarraylen() {
    return this._wrapperFields['fieldarraylen'].data;
  }
  set fieldarraylen(value) {
    this._wrapperFields['fieldarraylen'].fill(value);
  }
  get examples() {
    return this._examplesArray;
  }
  set examples(value) {
    this._examplesArray = value;
  }
  get constnames() {
    return this._constnamesArray;
  }
  set constnames(value) {
    this._constnamesArray = value;
  }
  get constvalues() {
    return this._constvaluesArray;
  }
  set constvalues(value) {
    this._constvaluesArray = value;
  }
  copyRefObject(refObject) {
    this._refObject = new TypeDefRefStruct(refObject.toObject());
    this._typeIntialized = true;
    this._wrapperFields.type.copyRefObject(this._refObject.type);
    refObject.fieldnames.data.length = refObject.fieldnames.size;
    for (let index = 0; index < refObject.fieldnames.size; index++) {
      this._fieldnamesArray[index] = refObject.fieldnames.data[index].data;
    }
    refObject.fieldtypes.data.length = refObject.fieldtypes.size;
    for (let index = 0; index < refObject.fieldtypes.size; index++) {
      this._fieldtypesArray[index] = refObject.fieldtypes.data[index].data;
    }
    this._wrapperFields.fieldarraylen.copyRefObject(this._refObject.fieldarraylen);
    refObject.examples.data.length = refObject.examples.size;
    for (let index = 0; index < refObject.examples.size; index++) {
      this._examplesArray[index] = refObject.examples.data[index].data;
    }
    refObject.constnames.data.length = refObject.constnames.size;
    for (let index = 0; index < refObject.constnames.size; index++) {
      this._constnamesArray[index] = refObject.constnames.data[index].data;
    }
    refObject.constvalues.data.length = refObject.constvalues.size;
    for (let index = 0; index < refObject.constvalues.size; index++) {
      this._constvaluesArray[index] = refObject.constvalues.data[index].data;
    }
  }
  copy(other) {
    this._refObject = new TypeDefRefStruct(other._refObject.toObject());
    this._typeIntialized = true;
    this._wrapperFields.type.copy(other._wrapperFields.type);
    this._fieldnamesArray = other._fieldnamesArray.slice();
    this._fieldtypesArray = other._fieldtypesArray.slice();
    this._wrapperFields.fieldarraylen.copy(other._wrapperFields.fieldarraylen);
    this._examplesArray = other._examplesArray.slice();
    this._constnamesArray = other._constnamesArray.slice();
    this._constvaluesArray = other._constvaluesArray.slice();
  }
  static get classType() {
    return TypeDefWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fieldnames","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fieldtypes","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fieldarraylen","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"examples","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"constnames","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"constvalues","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"rosapi_msgs","type":"TypeDef","stringUpperBound":null,"isPrimitiveType":false},"msgName":"TypeDef"};
  }
  hasMember(name) {
    let memberNames = ["type","fieldnames","fieldtypes","fieldarraylen","examples","constnames","constvalues"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class TypeDefArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof TypeDefWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new TypeDefWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TypeDefArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TypeDefArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new TypeDefRefArray(size);
    this._refObject = new TypeDefRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new TypeDefWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof TypeDefArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "TypeDefArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      TypeDefWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return TypeDefWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return TypeDefArrayWrapper;
  }
}
module.exports = TypeDefWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fieldnames",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fieldtypes",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fieldarraylen",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "examples",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "constnames",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "constvalues",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rosapi_msgs",
    "type": "TypeDef",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "TypeDef"
}
*/
