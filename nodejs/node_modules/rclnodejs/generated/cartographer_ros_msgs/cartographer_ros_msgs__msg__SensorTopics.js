// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const SensorTopicsRefStruct = StructType({
  laser_scan_topic: primitiveTypes.string,
  multi_echo_laser_scan_topic: primitiveTypes.string,
  point_cloud2_topic: primitiveTypes.string,
  imu_topic: primitiveTypes.string,
  odometry_topic: primitiveTypes.string,
  nav_sat_fix_topic: primitiveTypes.string,
  landmark_topic: primitiveTypes.string,
});
const SensorTopicsRefArray = ArrayType(SensorTopicsRefStruct);
const SensorTopicsRefStructArray = StructType({
  data: SensorTopicsRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SensorTopicsWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SensorTopicsRefStruct(other._refObject.toObject());
      this._laser_scan_topicIntialized = true;
      this._wrapperFields.laser_scan_topic =  new StringWrapper(other._wrapperFields.laser_scan_topic);
      this._multi_echo_laser_scan_topicIntialized = true;
      this._wrapperFields.multi_echo_laser_scan_topic =  new StringWrapper(other._wrapperFields.multi_echo_laser_scan_topic);
      this._point_cloud2_topicIntialized = true;
      this._wrapperFields.point_cloud2_topic =  new StringWrapper(other._wrapperFields.point_cloud2_topic);
      this._imu_topicIntialized = true;
      this._wrapperFields.imu_topic =  new StringWrapper(other._wrapperFields.imu_topic);
      this._odometry_topicIntialized = true;
      this._wrapperFields.odometry_topic =  new StringWrapper(other._wrapperFields.odometry_topic);
      this._nav_sat_fix_topicIntialized = true;
      this._wrapperFields.nav_sat_fix_topic =  new StringWrapper(other._wrapperFields.nav_sat_fix_topic);
      this._landmark_topicIntialized = true;
      this._wrapperFields.landmark_topic =  new StringWrapper(other._wrapperFields.landmark_topic);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SensorTopicsRefStruct();
    this._laser_scan_topicIntialized = false;
    this._wrapperFields.laser_scan_topic = new StringWrapper();
    this._multi_echo_laser_scan_topicIntialized = false;
    this._wrapperFields.multi_echo_laser_scan_topic = new StringWrapper();
    this._point_cloud2_topicIntialized = false;
    this._wrapperFields.point_cloud2_topic = new StringWrapper();
    this._imu_topicIntialized = false;
    this._wrapperFields.imu_topic = new StringWrapper();
    this._odometry_topicIntialized = false;
    this._wrapperFields.odometry_topic = new StringWrapper();
    this._nav_sat_fix_topicIntialized = false;
    this._wrapperFields.nav_sat_fix_topic = new StringWrapper();
    this._landmark_topicIntialized = false;
    this._wrapperFields.landmark_topic = new StringWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new SensorTopicsWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SensorTopicsArrayWrapper;
  }
  static get ArrayType() {
    return SensorTopicsArrayWrapper;
  }
  static get refObjectArrayType() {
    return SensorTopicsRefStructArray
  }
  static get refObjectType() {
    return SensorTopicsRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._laser_scan_topicIntialized) {
        throw new TypeError('Invalid argument: laser_scan_topic in SensorTopics');
      }
      if (!this._multi_echo_laser_scan_topicIntialized) {
        throw new TypeError('Invalid argument: multi_echo_laser_scan_topic in SensorTopics');
      }
      if (!this._point_cloud2_topicIntialized) {
        throw new TypeError('Invalid argument: point_cloud2_topic in SensorTopics');
      }
      if (!this._imu_topicIntialized) {
        throw new TypeError('Invalid argument: imu_topic in SensorTopics');
      }
      if (!this._odometry_topicIntialized) {
        throw new TypeError('Invalid argument: odometry_topic in SensorTopics');
      }
      if (!this._nav_sat_fix_topicIntialized) {
        throw new TypeError('Invalid argument: nav_sat_fix_topic in SensorTopics');
      }
      if (!this._landmark_topicIntialized) {
        throw new TypeError('Invalid argument: landmark_topic in SensorTopics');
      }
    }
    if (own) {
      this._wrapperFields.laser_scan_topic.freeze(own, checkConsistency);
    }
    this._refObject.laser_scan_topic = this._wrapperFields.laser_scan_topic.refObject;
    if (own) {
      this._wrapperFields.multi_echo_laser_scan_topic.freeze(own, checkConsistency);
    }
    this._refObject.multi_echo_laser_scan_topic = this._wrapperFields.multi_echo_laser_scan_topic.refObject;
    if (own) {
      this._wrapperFields.point_cloud2_topic.freeze(own, checkConsistency);
    }
    this._refObject.point_cloud2_topic = this._wrapperFields.point_cloud2_topic.refObject;
    if (own) {
      this._wrapperFields.imu_topic.freeze(own, checkConsistency);
    }
    this._refObject.imu_topic = this._wrapperFields.imu_topic.refObject;
    if (own) {
      this._wrapperFields.odometry_topic.freeze(own, checkConsistency);
    }
    this._refObject.odometry_topic = this._wrapperFields.odometry_topic.refObject;
    if (own) {
      this._wrapperFields.nav_sat_fix_topic.freeze(own, checkConsistency);
    }
    this._refObject.nav_sat_fix_topic = this._wrapperFields.nav_sat_fix_topic.refObject;
    if (own) {
      this._wrapperFields.landmark_topic.freeze(own, checkConsistency);
    }
    this._refObject.landmark_topic = this._wrapperFields.landmark_topic.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._laser_scan_topicIntialized = true;
    this._wrapperFields.laser_scan_topic.data = refObject.laser_scan_topic.data;
    this._multi_echo_laser_scan_topicIntialized = true;
    this._wrapperFields.multi_echo_laser_scan_topic.data = refObject.multi_echo_laser_scan_topic.data;
    this._point_cloud2_topicIntialized = true;
    this._wrapperFields.point_cloud2_topic.data = refObject.point_cloud2_topic.data;
    this._imu_topicIntialized = true;
    this._wrapperFields.imu_topic.data = refObject.imu_topic.data;
    this._odometry_topicIntialized = true;
    this._wrapperFields.odometry_topic.data = refObject.odometry_topic.data;
    this._nav_sat_fix_topicIntialized = true;
    this._wrapperFields.nav_sat_fix_topic.data = refObject.nav_sat_fix_topic.data;
    this._landmark_topicIntialized = true;
    this._wrapperFields.landmark_topic.data = refObject.landmark_topic.data;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.laser_scan_topic);
    StringWrapper.freeStruct(refObject.multi_echo_laser_scan_topic);
    StringWrapper.freeStruct(refObject.point_cloud2_topic);
    StringWrapper.freeStruct(refObject.imu_topic);
    StringWrapper.freeStruct(refObject.odometry_topic);
    StringWrapper.freeStruct(refObject.nav_sat_fix_topic);
    StringWrapper.freeStruct(refObject.landmark_topic);
  }
  static destoryRawROS(msg) {
    SensorTopicsWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'cartographer_ros_msgs', subFolder: 'msg', interfaceName: 'SensorTopics'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get laser_scan_topic() {
    if (!this._laser_scan_topicIntialized) {
      return undefined;
    }
    return this._wrapperFields.laser_scan_topic.data;
  }
  set laser_scan_topic(value) {
    this._laser_scan_topicIntialized = true;
    this._wrapperFields.laser_scan_topic.data = value;
  }
  get multi_echo_laser_scan_topic() {
    if (!this._multi_echo_laser_scan_topicIntialized) {
      return undefined;
    }
    return this._wrapperFields.multi_echo_laser_scan_topic.data;
  }
  set multi_echo_laser_scan_topic(value) {
    this._multi_echo_laser_scan_topicIntialized = true;
    this._wrapperFields.multi_echo_laser_scan_topic.data = value;
  }
  get point_cloud2_topic() {
    if (!this._point_cloud2_topicIntialized) {
      return undefined;
    }
    return this._wrapperFields.point_cloud2_topic.data;
  }
  set point_cloud2_topic(value) {
    this._point_cloud2_topicIntialized = true;
    this._wrapperFields.point_cloud2_topic.data = value;
  }
  get imu_topic() {
    if (!this._imu_topicIntialized) {
      return undefined;
    }
    return this._wrapperFields.imu_topic.data;
  }
  set imu_topic(value) {
    this._imu_topicIntialized = true;
    this._wrapperFields.imu_topic.data = value;
  }
  get odometry_topic() {
    if (!this._odometry_topicIntialized) {
      return undefined;
    }
    return this._wrapperFields.odometry_topic.data;
  }
  set odometry_topic(value) {
    this._odometry_topicIntialized = true;
    this._wrapperFields.odometry_topic.data = value;
  }
  get nav_sat_fix_topic() {
    if (!this._nav_sat_fix_topicIntialized) {
      return undefined;
    }
    return this._wrapperFields.nav_sat_fix_topic.data;
  }
  set nav_sat_fix_topic(value) {
    this._nav_sat_fix_topicIntialized = true;
    this._wrapperFields.nav_sat_fix_topic.data = value;
  }
  get landmark_topic() {
    if (!this._landmark_topicIntialized) {
      return undefined;
    }
    return this._wrapperFields.landmark_topic.data;
  }
  set landmark_topic(value) {
    this._landmark_topicIntialized = true;
    this._wrapperFields.landmark_topic.data = value;
  }
  copyRefObject(refObject) {
    this._refObject = new SensorTopicsRefStruct(refObject.toObject());
    this._laser_scan_topicIntialized = true;
    this._wrapperFields.laser_scan_topic.copyRefObject(this._refObject.laser_scan_topic);
    this._multi_echo_laser_scan_topicIntialized = true;
    this._wrapperFields.multi_echo_laser_scan_topic.copyRefObject(this._refObject.multi_echo_laser_scan_topic);
    this._point_cloud2_topicIntialized = true;
    this._wrapperFields.point_cloud2_topic.copyRefObject(this._refObject.point_cloud2_topic);
    this._imu_topicIntialized = true;
    this._wrapperFields.imu_topic.copyRefObject(this._refObject.imu_topic);
    this._odometry_topicIntialized = true;
    this._wrapperFields.odometry_topic.copyRefObject(this._refObject.odometry_topic);
    this._nav_sat_fix_topicIntialized = true;
    this._wrapperFields.nav_sat_fix_topic.copyRefObject(this._refObject.nav_sat_fix_topic);
    this._landmark_topicIntialized = true;
    this._wrapperFields.landmark_topic.copyRefObject(this._refObject.landmark_topic);
  }
  copy(other) {
    this._refObject = new SensorTopicsRefStruct(other._refObject.toObject());
    this._laser_scan_topicIntialized = true;
    this._wrapperFields.laser_scan_topic.copy(other._wrapperFields.laser_scan_topic);
    this._multi_echo_laser_scan_topicIntialized = true;
    this._wrapperFields.multi_echo_laser_scan_topic.copy(other._wrapperFields.multi_echo_laser_scan_topic);
    this._point_cloud2_topicIntialized = true;
    this._wrapperFields.point_cloud2_topic.copy(other._wrapperFields.point_cloud2_topic);
    this._imu_topicIntialized = true;
    this._wrapperFields.imu_topic.copy(other._wrapperFields.imu_topic);
    this._odometry_topicIntialized = true;
    this._wrapperFields.odometry_topic.copy(other._wrapperFields.odometry_topic);
    this._nav_sat_fix_topicIntialized = true;
    this._wrapperFields.nav_sat_fix_topic.copy(other._wrapperFields.nav_sat_fix_topic);
    this._landmark_topicIntialized = true;
    this._wrapperFields.landmark_topic.copy(other._wrapperFields.landmark_topic);
  }
  static get classType() {
    return SensorTopicsWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"laser_scan_topic","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"multi_echo_laser_scan_topic","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"point_cloud2_topic","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"imu_topic","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"odometry_topic","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"nav_sat_fix_topic","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"landmark_topic","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"cartographer_ros_msgs","type":"SensorTopics","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SensorTopics"};
  }
  hasMember(name) {
    let memberNames = ["laser_scan_topic","multi_echo_laser_scan_topic","point_cloud2_topic","imu_topic","odometry_topic","nav_sat_fix_topic","landmark_topic"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SensorTopicsArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SensorTopicsWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SensorTopicsWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorTopicsArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorTopicsArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SensorTopicsRefArray(size);
    this._refObject = new SensorTopicsRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SensorTopicsWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SensorTopicsArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SensorTopicsArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SensorTopicsWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SensorTopicsWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SensorTopicsArrayWrapper;
  }
}
module.exports = SensorTopicsWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "laser_scan_topic",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "multi_echo_laser_scan_topic",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "point_cloud2_topic",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "imu_topic",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "odometry_topic",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "nav_sat_fix_topic",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "landmark_topic",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "cartographer_ros_msgs",
    "type": "SensorTopics",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SensorTopics"
}
*/
