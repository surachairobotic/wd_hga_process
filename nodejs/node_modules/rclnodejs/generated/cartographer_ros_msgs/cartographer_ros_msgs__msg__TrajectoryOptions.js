// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const TrajectoryOptionsRefStruct = StructType({
  tracking_frame: primitiveTypes.string,
  published_frame: primitiveTypes.string,
  odom_frame: primitiveTypes.string,
  provide_odom_frame: primitiveTypes.bool,
  use_odometry: primitiveTypes.bool,
  use_nav_sat: primitiveTypes.bool,
  use_landmarks: primitiveTypes.bool,
  publish_frame_projected_to_2d: primitiveTypes.bool,
  num_laser_scans: primitiveTypes.int32,
  num_multi_echo_laser_scans: primitiveTypes.int32,
  num_subdivisions_per_laser_scan: primitiveTypes.int32,
  num_point_clouds: primitiveTypes.int32,
  rangefinder_sampling_ratio: primitiveTypes.float64,
  odometry_sampling_ratio: primitiveTypes.float64,
  fixed_frame_pose_sampling_ratio: primitiveTypes.float64,
  imu_sampling_ratio: primitiveTypes.float64,
  landmarks_sampling_ratio: primitiveTypes.float64,
  trajectory_builder_options_proto: primitiveTypes.string,
});
const TrajectoryOptionsRefArray = ArrayType(TrajectoryOptionsRefStruct);
const TrajectoryOptionsRefStructArray = StructType({
  data: TrajectoryOptionsRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class TrajectoryOptionsWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new TrajectoryOptionsRefStruct(other._refObject.toObject());
      this._tracking_frameIntialized = true;
      this._wrapperFields.tracking_frame =  new StringWrapper(other._wrapperFields.tracking_frame);
      this._published_frameIntialized = true;
      this._wrapperFields.published_frame =  new StringWrapper(other._wrapperFields.published_frame);
      this._odom_frameIntialized = true;
      this._wrapperFields.odom_frame =  new StringWrapper(other._wrapperFields.odom_frame);
      this._provide_odom_frameIntialized = true;
      this._use_odometryIntialized = true;
      this._use_nav_satIntialized = true;
      this._use_landmarksIntialized = true;
      this._publish_frame_projected_to_2dIntialized = true;
      this._num_laser_scansIntialized = true;
      this._num_multi_echo_laser_scansIntialized = true;
      this._num_subdivisions_per_laser_scanIntialized = true;
      this._num_point_cloudsIntialized = true;
      this._rangefinder_sampling_ratioIntialized = true;
      this._odometry_sampling_ratioIntialized = true;
      this._fixed_frame_pose_sampling_ratioIntialized = true;
      this._imu_sampling_ratioIntialized = true;
      this._landmarks_sampling_ratioIntialized = true;
      this._trajectory_builder_options_protoIntialized = true;
      this._wrapperFields.trajectory_builder_options_proto =  new StringWrapper(other._wrapperFields.trajectory_builder_options_proto);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new TrajectoryOptionsRefStruct();
    this._tracking_frameIntialized = false;
    this._wrapperFields.tracking_frame = new StringWrapper();
    this._published_frameIntialized = false;
    this._wrapperFields.published_frame = new StringWrapper();
    this._odom_frameIntialized = false;
    this._wrapperFields.odom_frame = new StringWrapper();
    this._provide_odom_frameIntialized = false;
    this._use_odometryIntialized = false;
    this._use_nav_satIntialized = false;
    this._use_landmarksIntialized = false;
    this._publish_frame_projected_to_2dIntialized = false;
    this._num_laser_scansIntialized = false;
    this._num_multi_echo_laser_scansIntialized = false;
    this._num_subdivisions_per_laser_scanIntialized = false;
    this._num_point_cloudsIntialized = false;
    this._rangefinder_sampling_ratioIntialized = false;
    this._odometry_sampling_ratioIntialized = false;
    this._fixed_frame_pose_sampling_ratioIntialized = false;
    this._imu_sampling_ratioIntialized = false;
    this._landmarks_sampling_ratioIntialized = false;
    this._trajectory_builder_options_protoIntialized = false;
    this._wrapperFields.trajectory_builder_options_proto = new StringWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new TrajectoryOptionsWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new TrajectoryOptionsArrayWrapper;
  }
  static get ArrayType() {
    return TrajectoryOptionsArrayWrapper;
  }
  static get refObjectArrayType() {
    return TrajectoryOptionsRefStructArray
  }
  static get refObjectType() {
    return TrajectoryOptionsRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._tracking_frameIntialized) {
        throw new TypeError('Invalid argument: tracking_frame in TrajectoryOptions');
      }
      if (!this._published_frameIntialized) {
        throw new TypeError('Invalid argument: published_frame in TrajectoryOptions');
      }
      if (!this._odom_frameIntialized) {
        throw new TypeError('Invalid argument: odom_frame in TrajectoryOptions');
      }
      if (!this._provide_odom_frameIntialized) {
        throw new TypeError('Invalid argument: provide_odom_frame in TrajectoryOptions');
      }
      if (!this._use_odometryIntialized) {
        throw new TypeError('Invalid argument: use_odometry in TrajectoryOptions');
      }
      if (!this._use_nav_satIntialized) {
        throw new TypeError('Invalid argument: use_nav_sat in TrajectoryOptions');
      }
      if (!this._use_landmarksIntialized) {
        throw new TypeError('Invalid argument: use_landmarks in TrajectoryOptions');
      }
      if (!this._publish_frame_projected_to_2dIntialized) {
        throw new TypeError('Invalid argument: publish_frame_projected_to_2d in TrajectoryOptions');
      }
      if (!this._num_laser_scansIntialized) {
        throw new TypeError('Invalid argument: num_laser_scans in TrajectoryOptions');
      }
      if (!this._num_multi_echo_laser_scansIntialized) {
        throw new TypeError('Invalid argument: num_multi_echo_laser_scans in TrajectoryOptions');
      }
      if (!this._num_subdivisions_per_laser_scanIntialized) {
        throw new TypeError('Invalid argument: num_subdivisions_per_laser_scan in TrajectoryOptions');
      }
      if (!this._num_point_cloudsIntialized) {
        throw new TypeError('Invalid argument: num_point_clouds in TrajectoryOptions');
      }
      if (!this._rangefinder_sampling_ratioIntialized) {
        throw new TypeError('Invalid argument: rangefinder_sampling_ratio in TrajectoryOptions');
      }
      if (!this._odometry_sampling_ratioIntialized) {
        throw new TypeError('Invalid argument: odometry_sampling_ratio in TrajectoryOptions');
      }
      if (!this._fixed_frame_pose_sampling_ratioIntialized) {
        throw new TypeError('Invalid argument: fixed_frame_pose_sampling_ratio in TrajectoryOptions');
      }
      if (!this._imu_sampling_ratioIntialized) {
        throw new TypeError('Invalid argument: imu_sampling_ratio in TrajectoryOptions');
      }
      if (!this._landmarks_sampling_ratioIntialized) {
        throw new TypeError('Invalid argument: landmarks_sampling_ratio in TrajectoryOptions');
      }
      if (!this._trajectory_builder_options_protoIntialized) {
        throw new TypeError('Invalid argument: trajectory_builder_options_proto in TrajectoryOptions');
      }
    }
    if (own) {
      this._wrapperFields.tracking_frame.freeze(own, checkConsistency);
    }
    this._refObject.tracking_frame = this._wrapperFields.tracking_frame.refObject;
    if (own) {
      this._wrapperFields.published_frame.freeze(own, checkConsistency);
    }
    this._refObject.published_frame = this._wrapperFields.published_frame.refObject;
    if (own) {
      this._wrapperFields.odom_frame.freeze(own, checkConsistency);
    }
    this._refObject.odom_frame = this._wrapperFields.odom_frame.refObject;
    if (own) {
      this._wrapperFields.trajectory_builder_options_proto.freeze(own, checkConsistency);
    }
    this._refObject.trajectory_builder_options_proto = this._wrapperFields.trajectory_builder_options_proto.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._tracking_frameIntialized = true;
    this._wrapperFields.tracking_frame.data = refObject.tracking_frame.data;
    this._published_frameIntialized = true;
    this._wrapperFields.published_frame.data = refObject.published_frame.data;
    this._odom_frameIntialized = true;
    this._wrapperFields.odom_frame.data = refObject.odom_frame.data;
    this._provide_odom_frameIntialized = true;
    this._refObject.provide_odom_frame = refObject.provide_odom_frame;
    this._use_odometryIntialized = true;
    this._refObject.use_odometry = refObject.use_odometry;
    this._use_nav_satIntialized = true;
    this._refObject.use_nav_sat = refObject.use_nav_sat;
    this._use_landmarksIntialized = true;
    this._refObject.use_landmarks = refObject.use_landmarks;
    this._publish_frame_projected_to_2dIntialized = true;
    this._refObject.publish_frame_projected_to_2d = refObject.publish_frame_projected_to_2d;
    this._num_laser_scansIntialized = true;
    this._refObject.num_laser_scans = refObject.num_laser_scans;
    this._num_multi_echo_laser_scansIntialized = true;
    this._refObject.num_multi_echo_laser_scans = refObject.num_multi_echo_laser_scans;
    this._num_subdivisions_per_laser_scanIntialized = true;
    this._refObject.num_subdivisions_per_laser_scan = refObject.num_subdivisions_per_laser_scan;
    this._num_point_cloudsIntialized = true;
    this._refObject.num_point_clouds = refObject.num_point_clouds;
    this._rangefinder_sampling_ratioIntialized = true;
    this._refObject.rangefinder_sampling_ratio = refObject.rangefinder_sampling_ratio;
    this._odometry_sampling_ratioIntialized = true;
    this._refObject.odometry_sampling_ratio = refObject.odometry_sampling_ratio;
    this._fixed_frame_pose_sampling_ratioIntialized = true;
    this._refObject.fixed_frame_pose_sampling_ratio = refObject.fixed_frame_pose_sampling_ratio;
    this._imu_sampling_ratioIntialized = true;
    this._refObject.imu_sampling_ratio = refObject.imu_sampling_ratio;
    this._landmarks_sampling_ratioIntialized = true;
    this._refObject.landmarks_sampling_ratio = refObject.landmarks_sampling_ratio;
    this._trajectory_builder_options_protoIntialized = true;
    this._wrapperFields.trajectory_builder_options_proto.data = refObject.trajectory_builder_options_proto.data;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.tracking_frame);
    StringWrapper.freeStruct(refObject.published_frame);
    StringWrapper.freeStruct(refObject.odom_frame);
    StringWrapper.freeStruct(refObject.trajectory_builder_options_proto);
  }
  static destoryRawROS(msg) {
    TrajectoryOptionsWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'cartographer_ros_msgs', subFolder: 'msg', interfaceName: 'TrajectoryOptions'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get tracking_frame() {
    if (!this._tracking_frameIntialized) {
      return undefined;
    }
    return this._wrapperFields.tracking_frame.data;
  }
  set tracking_frame(value) {
    this._tracking_frameIntialized = true;
    this._wrapperFields.tracking_frame.data = value;
  }
  get published_frame() {
    if (!this._published_frameIntialized) {
      return undefined;
    }
    return this._wrapperFields.published_frame.data;
  }
  set published_frame(value) {
    this._published_frameIntialized = true;
    this._wrapperFields.published_frame.data = value;
  }
  get odom_frame() {
    if (!this._odom_frameIntialized) {
      return undefined;
    }
    return this._wrapperFields.odom_frame.data;
  }
  set odom_frame(value) {
    this._odom_frameIntialized = true;
    this._wrapperFields.odom_frame.data = value;
  }
  get provide_odom_frame() {
    if (!this._provide_odom_frameIntialized) {
      return undefined;
    }
    return this._refObject.provide_odom_frame;
  }
  set provide_odom_frame(value) {
    this._provide_odom_frameIntialized = true;
    this._refObject.provide_odom_frame = value;
  }
  get use_odometry() {
    if (!this._use_odometryIntialized) {
      return undefined;
    }
    return this._refObject.use_odometry;
  }
  set use_odometry(value) {
    this._use_odometryIntialized = true;
    this._refObject.use_odometry = value;
  }
  get use_nav_sat() {
    if (!this._use_nav_satIntialized) {
      return undefined;
    }
    return this._refObject.use_nav_sat;
  }
  set use_nav_sat(value) {
    this._use_nav_satIntialized = true;
    this._refObject.use_nav_sat = value;
  }
  get use_landmarks() {
    if (!this._use_landmarksIntialized) {
      return undefined;
    }
    return this._refObject.use_landmarks;
  }
  set use_landmarks(value) {
    this._use_landmarksIntialized = true;
    this._refObject.use_landmarks = value;
  }
  get publish_frame_projected_to_2d() {
    if (!this._publish_frame_projected_to_2dIntialized) {
      return undefined;
    }
    return this._refObject.publish_frame_projected_to_2d;
  }
  set publish_frame_projected_to_2d(value) {
    this._publish_frame_projected_to_2dIntialized = true;
    this._refObject.publish_frame_projected_to_2d = value;
  }
  get num_laser_scans() {
    if (!this._num_laser_scansIntialized) {
      return undefined;
    }
    return this._refObject.num_laser_scans;
  }
  set num_laser_scans(value) {
    this._num_laser_scansIntialized = true;
    this._refObject.num_laser_scans = value;
  }
  get num_multi_echo_laser_scans() {
    if (!this._num_multi_echo_laser_scansIntialized) {
      return undefined;
    }
    return this._refObject.num_multi_echo_laser_scans;
  }
  set num_multi_echo_laser_scans(value) {
    this._num_multi_echo_laser_scansIntialized = true;
    this._refObject.num_multi_echo_laser_scans = value;
  }
  get num_subdivisions_per_laser_scan() {
    if (!this._num_subdivisions_per_laser_scanIntialized) {
      return undefined;
    }
    return this._refObject.num_subdivisions_per_laser_scan;
  }
  set num_subdivisions_per_laser_scan(value) {
    this._num_subdivisions_per_laser_scanIntialized = true;
    this._refObject.num_subdivisions_per_laser_scan = value;
  }
  get num_point_clouds() {
    if (!this._num_point_cloudsIntialized) {
      return undefined;
    }
    return this._refObject.num_point_clouds;
  }
  set num_point_clouds(value) {
    this._num_point_cloudsIntialized = true;
    this._refObject.num_point_clouds = value;
  }
  get rangefinder_sampling_ratio() {
    if (!this._rangefinder_sampling_ratioIntialized) {
      return undefined;
    }
    return this._refObject.rangefinder_sampling_ratio;
  }
  set rangefinder_sampling_ratio(value) {
    this._rangefinder_sampling_ratioIntialized = true;
    this._refObject.rangefinder_sampling_ratio = value;
  }
  get odometry_sampling_ratio() {
    if (!this._odometry_sampling_ratioIntialized) {
      return undefined;
    }
    return this._refObject.odometry_sampling_ratio;
  }
  set odometry_sampling_ratio(value) {
    this._odometry_sampling_ratioIntialized = true;
    this._refObject.odometry_sampling_ratio = value;
  }
  get fixed_frame_pose_sampling_ratio() {
    if (!this._fixed_frame_pose_sampling_ratioIntialized) {
      return undefined;
    }
    return this._refObject.fixed_frame_pose_sampling_ratio;
  }
  set fixed_frame_pose_sampling_ratio(value) {
    this._fixed_frame_pose_sampling_ratioIntialized = true;
    this._refObject.fixed_frame_pose_sampling_ratio = value;
  }
  get imu_sampling_ratio() {
    if (!this._imu_sampling_ratioIntialized) {
      return undefined;
    }
    return this._refObject.imu_sampling_ratio;
  }
  set imu_sampling_ratio(value) {
    this._imu_sampling_ratioIntialized = true;
    this._refObject.imu_sampling_ratio = value;
  }
  get landmarks_sampling_ratio() {
    if (!this._landmarks_sampling_ratioIntialized) {
      return undefined;
    }
    return this._refObject.landmarks_sampling_ratio;
  }
  set landmarks_sampling_ratio(value) {
    this._landmarks_sampling_ratioIntialized = true;
    this._refObject.landmarks_sampling_ratio = value;
  }
  get trajectory_builder_options_proto() {
    if (!this._trajectory_builder_options_protoIntialized) {
      return undefined;
    }
    return this._wrapperFields.trajectory_builder_options_proto.data;
  }
  set trajectory_builder_options_proto(value) {
    this._trajectory_builder_options_protoIntialized = true;
    this._wrapperFields.trajectory_builder_options_proto.data = value;
  }
  copyRefObject(refObject) {
    this._refObject = new TrajectoryOptionsRefStruct(refObject.toObject());
    this._tracking_frameIntialized = true;
    this._wrapperFields.tracking_frame.copyRefObject(this._refObject.tracking_frame);
    this._published_frameIntialized = true;
    this._wrapperFields.published_frame.copyRefObject(this._refObject.published_frame);
    this._odom_frameIntialized = true;
    this._wrapperFields.odom_frame.copyRefObject(this._refObject.odom_frame);
    this._provide_odom_frameIntialized = true;
    this._use_odometryIntialized = true;
    this._use_nav_satIntialized = true;
    this._use_landmarksIntialized = true;
    this._publish_frame_projected_to_2dIntialized = true;
    this._num_laser_scansIntialized = true;
    this._num_multi_echo_laser_scansIntialized = true;
    this._num_subdivisions_per_laser_scanIntialized = true;
    this._num_point_cloudsIntialized = true;
    this._rangefinder_sampling_ratioIntialized = true;
    this._odometry_sampling_ratioIntialized = true;
    this._fixed_frame_pose_sampling_ratioIntialized = true;
    this._imu_sampling_ratioIntialized = true;
    this._landmarks_sampling_ratioIntialized = true;
    this._trajectory_builder_options_protoIntialized = true;
    this._wrapperFields.trajectory_builder_options_proto.copyRefObject(this._refObject.trajectory_builder_options_proto);
  }
  copy(other) {
    this._refObject = new TrajectoryOptionsRefStruct(other._refObject.toObject());
    this._tracking_frameIntialized = true;
    this._wrapperFields.tracking_frame.copy(other._wrapperFields.tracking_frame);
    this._published_frameIntialized = true;
    this._wrapperFields.published_frame.copy(other._wrapperFields.published_frame);
    this._odom_frameIntialized = true;
    this._wrapperFields.odom_frame.copy(other._wrapperFields.odom_frame);
    this._provide_odom_frameIntialized = true;
    this._use_odometryIntialized = true;
    this._use_nav_satIntialized = true;
    this._use_landmarksIntialized = true;
    this._publish_frame_projected_to_2dIntialized = true;
    this._num_laser_scansIntialized = true;
    this._num_multi_echo_laser_scansIntialized = true;
    this._num_subdivisions_per_laser_scanIntialized = true;
    this._num_point_cloudsIntialized = true;
    this._rangefinder_sampling_ratioIntialized = true;
    this._odometry_sampling_ratioIntialized = true;
    this._fixed_frame_pose_sampling_ratioIntialized = true;
    this._imu_sampling_ratioIntialized = true;
    this._landmarks_sampling_ratioIntialized = true;
    this._trajectory_builder_options_protoIntialized = true;
    this._wrapperFields.trajectory_builder_options_proto.copy(other._wrapperFields.trajectory_builder_options_proto);
  }
  static get classType() {
    return TrajectoryOptionsWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"tracking_frame","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"published_frame","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"odom_frame","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"provide_odom_frame","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"use_odometry","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"use_nav_sat","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"use_landmarks","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"publish_frame_projected_to_2d","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"num_laser_scans","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"num_multi_echo_laser_scans","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"num_subdivisions_per_laser_scan","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"num_point_clouds","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rangefinder_sampling_ratio","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"odometry_sampling_ratio","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fixed_frame_pose_sampling_ratio","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"imu_sampling_ratio","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"landmarks_sampling_ratio","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"trajectory_builder_options_proto","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"cartographer_ros_msgs","type":"TrajectoryOptions","stringUpperBound":null,"isPrimitiveType":false},"msgName":"TrajectoryOptions"};
  }
  hasMember(name) {
    let memberNames = ["tracking_frame","published_frame","odom_frame","provide_odom_frame","use_odometry","use_nav_sat","use_landmarks","publish_frame_projected_to_2d","num_laser_scans","num_multi_echo_laser_scans","num_subdivisions_per_laser_scan","num_point_clouds","rangefinder_sampling_ratio","odometry_sampling_ratio","fixed_frame_pose_sampling_ratio","imu_sampling_ratio","landmarks_sampling_ratio","trajectory_builder_options_proto"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class TrajectoryOptionsArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof TrajectoryOptionsWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new TrajectoryOptionsWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TrajectoryOptionsArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TrajectoryOptionsArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new TrajectoryOptionsRefArray(size);
    this._refObject = new TrajectoryOptionsRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new TrajectoryOptionsWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof TrajectoryOptionsArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "TrajectoryOptionsArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      TrajectoryOptionsWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return TrajectoryOptionsWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return TrajectoryOptionsArrayWrapper;
  }
}
module.exports = TrajectoryOptionsWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "tracking_frame",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "published_frame",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "odom_frame",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "provide_odom_frame",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "use_odometry",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "use_nav_sat",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "use_landmarks",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "publish_frame_projected_to_2d",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "num_laser_scans",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "num_multi_echo_laser_scans",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "num_subdivisions_per_laser_scan",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "num_point_clouds",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rangefinder_sampling_ratio",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "odometry_sampling_ratio",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fixed_frame_pose_sampling_ratio",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "imu_sampling_ratio",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "landmarks_sampling_ratio",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "trajectory_builder_options_proto",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "cartographer_ros_msgs",
    "type": "TrajectoryOptions",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "TrajectoryOptions"
}
*/
