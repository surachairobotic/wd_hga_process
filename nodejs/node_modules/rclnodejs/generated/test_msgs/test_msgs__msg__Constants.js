// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const ConstantsRefStruct = StructType({
  _dummy: primitiveTypes.bool,
});
const ConstantsRefArray = ArrayType(ConstantsRefStruct);
const ConstantsRefStructArray = StructType({
  data: ConstantsRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ConstantsWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ConstantsRefStruct(other._refObject.toObject());
      this.__dummyIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ConstantsRefStruct();
    this.__dummyIntialized = true;
  }
  static createFromRefObject(refObject) {
    let self = new ConstantsWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ConstantsArrayWrapper;
  }
  static get ArrayType() {
    return ConstantsArrayWrapper;
  }
  static get refObjectArrayType() {
    return ConstantsRefStructArray
  }
  static get refObjectType() {
    return ConstantsRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this.__dummyIntialized) {
        throw new TypeError('Invalid argument: _dummy in Constants');
      }
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this.__dummyIntialized = true;
    this._refObject._dummy = refObject._dummy;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    ConstantsWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'test_msgs', subFolder: 'msg', interfaceName: 'Constants'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get _dummy() {
    if (!this.__dummyIntialized) {
      return undefined;
    }
    return this._refObject._dummy;
  }
  set _dummy(value) {
    this.__dummyIntialized = true;
    this._refObject._dummy = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ConstantsRefStruct(refObject.toObject());
    this.__dummyIntialized = true;
  }
  copy(other) {
    this._refObject = new ConstantsRefStruct(other._refObject.toObject());
    this.__dummyIntialized = true;
  }
  static get classType() {
    return ConstantsWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"bool","name":"BOOL_CONST","value":true},{"type":"byte","name":"BYTE_CONST","value":50},{"type":"char","name":"CHAR_CONST","value":100},{"type":"float32","name":"FLOAT32_CONST","value":1.125},{"type":"float64","name":"FLOAT64_CONST","value":1.125},{"type":"int8","name":"INT8_CONST","value":-50},{"type":"uint8","name":"UINT8_CONST","value":200},{"type":"int16","name":"INT16_CONST","value":-1000},{"type":"uint16","name":"UINT16_CONST","value":2000},{"type":"int32","name":"INT32_CONST","value":-30000},{"type":"uint32","name":"UINT32_CONST","value":60000},{"type":"int64","name":"INT64_CONST","value":-40000000},{"type":"uint64","name":"UINT64_CONST","value":50000000}],"fields":[],"baseType":{"pkgName":"test_msgs","type":"Constants","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Constants"};
  }
  hasMember(name) {
    let memberNames = ["_dummy"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ConstantsArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ConstantsWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ConstantsWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ConstantsArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ConstantsArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ConstantsRefArray(size);
    this._refObject = new ConstantsRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ConstantsWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ConstantsArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ConstantsArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ConstantsWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ConstantsWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ConstantsArrayWrapper;
  }
}
// Define constants (13 in total)
Object.defineProperty(ConstantsWrapper, "BOOL_CONST", {value: true, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "BYTE_CONST", {value: 50, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "CHAR_CONST", {value: 100, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "FLOAT32_CONST", {value: 1.125, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "FLOAT64_CONST", {value: 1.125, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "INT8_CONST", {value: -50, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "UINT8_CONST", {value: 200, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "INT16_CONST", {value: -1000, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "UINT16_CONST", {value: 2000, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "INT32_CONST", {value: -30000, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "UINT32_CONST", {value: 60000, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "INT64_CONST", {value: -40000000, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ConstantsWrapper, "UINT64_CONST", {value: 50000000, writable: false, enumerable: true, configurable: true});
module.exports = ConstantsWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "bool",
      "name": "BOOL_CONST",
      "value": true
    },
    {
      "type": "byte",
      "name": "BYTE_CONST",
      "value": 50
    },
    {
      "type": "char",
      "name": "CHAR_CONST",
      "value": 100
    },
    {
      "type": "float32",
      "name": "FLOAT32_CONST",
      "value": 1.125
    },
    {
      "type": "float64",
      "name": "FLOAT64_CONST",
      "value": 1.125
    },
    {
      "type": "int8",
      "name": "INT8_CONST",
      "value": -50
    },
    {
      "type": "uint8",
      "name": "UINT8_CONST",
      "value": 200
    },
    {
      "type": "int16",
      "name": "INT16_CONST",
      "value": -1000
    },
    {
      "type": "uint16",
      "name": "UINT16_CONST",
      "value": 2000
    },
    {
      "type": "int32",
      "name": "INT32_CONST",
      "value": -30000
    },
    {
      "type": "uint32",
      "name": "UINT32_CONST",
      "value": 60000
    },
    {
      "type": "int64",
      "name": "INT64_CONST",
      "value": -40000000
    },
    {
      "type": "uint64",
      "name": "UINT64_CONST",
      "value": 50000000
    }
  ],
  "fields": [],
  "baseType": {
    "pkgName": "test_msgs",
    "type": "Constants",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Constants"
}
*/
