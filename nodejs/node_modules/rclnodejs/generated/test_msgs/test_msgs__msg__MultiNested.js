// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const ArraysWrapper = require('../../generated/test_msgs/test_msgs__msg__Arrays.js');
const BoundedSequencesWrapper = require('../../generated/test_msgs/test_msgs__msg__BoundedSequences.js');
const UnboundedSequencesWrapper = require('../../generated/test_msgs/test_msgs__msg__UnboundedSequences.js');
const MultiNestedRefStruct = StructType({
  array_of_arrays: ArrayType(ArraysWrapper.refObjectType, 3),
  array_of_bounded_sequences: ArrayType(BoundedSequencesWrapper.refObjectType, 3),
  array_of_unbounded_sequences: ArrayType(UnboundedSequencesWrapper.refObjectType, 3),
  bounded_sequence_of_arrays: ArraysWrapper.refObjectArrayType,
  bounded_sequence_of_bounded_sequences: BoundedSequencesWrapper.refObjectArrayType,
  bounded_sequence_of_unbounded_sequences: UnboundedSequencesWrapper.refObjectArrayType,
  unbounded_sequence_of_arrays: ArraysWrapper.refObjectArrayType,
  unbounded_sequence_of_bounded_sequences: BoundedSequencesWrapper.refObjectArrayType,
  unbounded_sequence_of_unbounded_sequences: UnboundedSequencesWrapper.refObjectArrayType,
});
const MultiNestedRefArray = ArrayType(MultiNestedRefStruct);
const MultiNestedRefStructArray = StructType({
  data: MultiNestedRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class MultiNestedWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new MultiNestedRefStruct(other._refObject.toObject());
      this._wrapperFields.array_of_arrays = ArraysWrapper.createArray();
      this._wrapperFields.array_of_arrays.copy(other._wrapperFields.array_of_arrays);
      this._wrapperFields.array_of_bounded_sequences = BoundedSequencesWrapper.createArray();
      this._wrapperFields.array_of_bounded_sequences.copy(other._wrapperFields.array_of_bounded_sequences);
      this._wrapperFields.array_of_unbounded_sequences = UnboundedSequencesWrapper.createArray();
      this._wrapperFields.array_of_unbounded_sequences.copy(other._wrapperFields.array_of_unbounded_sequences);
      this._wrapperFields.bounded_sequence_of_arrays = ArraysWrapper.createArray();
      this._wrapperFields.bounded_sequence_of_arrays.copy(other._wrapperFields.bounded_sequence_of_arrays);
      this._wrapperFields.bounded_sequence_of_bounded_sequences = BoundedSequencesWrapper.createArray();
      this._wrapperFields.bounded_sequence_of_bounded_sequences.copy(other._wrapperFields.bounded_sequence_of_bounded_sequences);
      this._wrapperFields.bounded_sequence_of_unbounded_sequences = UnboundedSequencesWrapper.createArray();
      this._wrapperFields.bounded_sequence_of_unbounded_sequences.copy(other._wrapperFields.bounded_sequence_of_unbounded_sequences);
      this._wrapperFields.unbounded_sequence_of_arrays = ArraysWrapper.createArray();
      this._wrapperFields.unbounded_sequence_of_arrays.copy(other._wrapperFields.unbounded_sequence_of_arrays);
      this._wrapperFields.unbounded_sequence_of_bounded_sequences = BoundedSequencesWrapper.createArray();
      this._wrapperFields.unbounded_sequence_of_bounded_sequences.copy(other._wrapperFields.unbounded_sequence_of_bounded_sequences);
      this._wrapperFields.unbounded_sequence_of_unbounded_sequences = UnboundedSequencesWrapper.createArray();
      this._wrapperFields.unbounded_sequence_of_unbounded_sequences.copy(other._wrapperFields.unbounded_sequence_of_unbounded_sequences);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new MultiNestedRefStruct();
    this._wrapperFields.array_of_arrays = ArraysWrapper.createArray();
    this._wrapperFields.array_of_bounded_sequences = BoundedSequencesWrapper.createArray();
    this._wrapperFields.array_of_unbounded_sequences = UnboundedSequencesWrapper.createArray();
    this._wrapperFields.bounded_sequence_of_arrays = ArraysWrapper.createArray();
    this._wrapperFields.bounded_sequence_of_bounded_sequences = BoundedSequencesWrapper.createArray();
    this._wrapperFields.bounded_sequence_of_unbounded_sequences = UnboundedSequencesWrapper.createArray();
    this._wrapperFields.unbounded_sequence_of_arrays = ArraysWrapper.createArray();
    this._wrapperFields.unbounded_sequence_of_bounded_sequences = BoundedSequencesWrapper.createArray();
    this._wrapperFields.unbounded_sequence_of_unbounded_sequences = UnboundedSequencesWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new MultiNestedWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new MultiNestedArrayWrapper;
  }
  static get ArrayType() {
    return MultiNestedArrayWrapper;
  }
  static get refObjectArrayType() {
    return MultiNestedRefStructArray
  }
  static get refObjectType() {
    return MultiNestedRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
    }
    for (let i = 0; i < this._wrapperFields.array_of_arrays.data.length; i++) {
      this._refObject.array_of_arrays[i] = this._wrapperFields.array_of_arrays.data[i].freeze(own, checkConsistency);
      this._refObject.array_of_arrays[i] = this._wrapperFields.array_of_arrays.data[i].refObject;
    }
    for (let i = 0; i < this._wrapperFields.array_of_bounded_sequences.data.length; i++) {
      this._refObject.array_of_bounded_sequences[i] = this._wrapperFields.array_of_bounded_sequences.data[i].freeze(own, checkConsistency);
      this._refObject.array_of_bounded_sequences[i] = this._wrapperFields.array_of_bounded_sequences.data[i].refObject;
    }
    for (let i = 0; i < this._wrapperFields.array_of_unbounded_sequences.data.length; i++) {
      this._refObject.array_of_unbounded_sequences[i] = this._wrapperFields.array_of_unbounded_sequences.data[i].freeze(own, checkConsistency);
      this._refObject.array_of_unbounded_sequences[i] = this._wrapperFields.array_of_unbounded_sequences.data[i].refObject;
    }
    this._wrapperFields.bounded_sequence_of_arrays.freeze(own, checkConsistency);
    this._refObject.bounded_sequence_of_arrays = this._wrapperFields.bounded_sequence_of_arrays.refObject;
    this._wrapperFields.bounded_sequence_of_bounded_sequences.freeze(own, checkConsistency);
    this._refObject.bounded_sequence_of_bounded_sequences = this._wrapperFields.bounded_sequence_of_bounded_sequences.refObject;
    this._wrapperFields.bounded_sequence_of_unbounded_sequences.freeze(own, checkConsistency);
    this._refObject.bounded_sequence_of_unbounded_sequences = this._wrapperFields.bounded_sequence_of_unbounded_sequences.refObject;
    this._wrapperFields.unbounded_sequence_of_arrays.freeze(own, checkConsistency);
    this._refObject.unbounded_sequence_of_arrays = this._wrapperFields.unbounded_sequence_of_arrays.refObject;
    this._wrapperFields.unbounded_sequence_of_bounded_sequences.freeze(own, checkConsistency);
    this._refObject.unbounded_sequence_of_bounded_sequences = this._wrapperFields.unbounded_sequence_of_bounded_sequences.refObject;
    this._wrapperFields.unbounded_sequence_of_unbounded_sequences.freeze(own, checkConsistency);
    this._refObject.unbounded_sequence_of_unbounded_sequences = this._wrapperFields.unbounded_sequence_of_unbounded_sequences.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._refObject.array_of_arrays = refObject.array_of_arrays;
    this._wrapperFields.array_of_arrays.size = 3
    for (let i = 0; i < 3; i++) {
      this._wrapperFields.array_of_arrays.data[i].copyRefObject(refObject.array_of_arrays[i]);
    }
    this._refObject.array_of_bounded_sequences = refObject.array_of_bounded_sequences;
    this._wrapperFields.array_of_bounded_sequences.size = 3
    for (let i = 0; i < 3; i++) {
      this._wrapperFields.array_of_bounded_sequences.data[i].copyRefObject(refObject.array_of_bounded_sequences[i]);
    }
    this._refObject.array_of_unbounded_sequences = refObject.array_of_unbounded_sequences;
    this._wrapperFields.array_of_unbounded_sequences.size = 3
    for (let i = 0; i < 3; i++) {
      this._wrapperFields.array_of_unbounded_sequences.data[i].copyRefObject(refObject.array_of_unbounded_sequences[i]);
    }
    this._wrapperFields.bounded_sequence_of_arrays.copyRefObject(refObject.bounded_sequence_of_arrays);
    this._wrapperFields.bounded_sequence_of_bounded_sequences.copyRefObject(refObject.bounded_sequence_of_bounded_sequences);
    this._wrapperFields.bounded_sequence_of_unbounded_sequences.copyRefObject(refObject.bounded_sequence_of_unbounded_sequences);
    this._wrapperFields.unbounded_sequence_of_arrays.copyRefObject(refObject.unbounded_sequence_of_arrays);
    this._wrapperFields.unbounded_sequence_of_bounded_sequences.copyRefObject(refObject.unbounded_sequence_of_bounded_sequences);
    this._wrapperFields.unbounded_sequence_of_unbounded_sequences.copyRefObject(refObject.unbounded_sequence_of_unbounded_sequences);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    for (let i = 0; i < 3; i++) {
      ArraysWrapper.freeStruct(refObject.array_of_arrays[i]);
    }
    for (let i = 0; i < 3; i++) {
      BoundedSequencesWrapper.freeStruct(refObject.array_of_bounded_sequences[i]);
    }
    for (let i = 0; i < 3; i++) {
      UnboundedSequencesWrapper.freeStruct(refObject.array_of_unbounded_sequences[i]);
    }
    if (refObject.bounded_sequence_of_arrays.size != 0) {
      ArraysWrapper.ArrayType.freeArray(refObject.bounded_sequence_of_arrays);
      if (ArraysWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.bounded_sequence_of_arrays, ArraysWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.bounded_sequence_of_bounded_sequences.size != 0) {
      BoundedSequencesWrapper.ArrayType.freeArray(refObject.bounded_sequence_of_bounded_sequences);
      if (BoundedSequencesWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.bounded_sequence_of_bounded_sequences, BoundedSequencesWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.bounded_sequence_of_unbounded_sequences.size != 0) {
      UnboundedSequencesWrapper.ArrayType.freeArray(refObject.bounded_sequence_of_unbounded_sequences);
      if (UnboundedSequencesWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.bounded_sequence_of_unbounded_sequences, UnboundedSequencesWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.unbounded_sequence_of_arrays.size != 0) {
      ArraysWrapper.ArrayType.freeArray(refObject.unbounded_sequence_of_arrays);
      if (ArraysWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.unbounded_sequence_of_arrays, ArraysWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.unbounded_sequence_of_bounded_sequences.size != 0) {
      BoundedSequencesWrapper.ArrayType.freeArray(refObject.unbounded_sequence_of_bounded_sequences);
      if (BoundedSequencesWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.unbounded_sequence_of_bounded_sequences, BoundedSequencesWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.unbounded_sequence_of_unbounded_sequences.size != 0) {
      UnboundedSequencesWrapper.ArrayType.freeArray(refObject.unbounded_sequence_of_unbounded_sequences);
      if (UnboundedSequencesWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.unbounded_sequence_of_unbounded_sequences, UnboundedSequencesWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    MultiNestedWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'test_msgs', subFolder: 'msg', interfaceName: 'MultiNested'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get array_of_arrays() {
    return this._wrapperFields.array_of_arrays;
  }
  set array_of_arrays(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields.array_of_arrays.fill(value);
  }
  get array_of_bounded_sequences() {
    return this._wrapperFields.array_of_bounded_sequences;
  }
  set array_of_bounded_sequences(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields.array_of_bounded_sequences.fill(value);
  }
  get array_of_unbounded_sequences() {
    return this._wrapperFields.array_of_unbounded_sequences;
  }
  set array_of_unbounded_sequences(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields.array_of_unbounded_sequences.fill(value);
  }
  get bounded_sequence_of_arrays() {
    return this._wrapperFields.bounded_sequence_of_arrays;
  }
  set bounded_sequence_of_arrays(value) {
    if (value.length > 3) {
      throw new RangeError('The length of array bounded_sequence_of_arrays must be <= 3.');
    }
    this._wrapperFields.bounded_sequence_of_arrays.fill(value);
  }
  get bounded_sequence_of_bounded_sequences() {
    return this._wrapperFields.bounded_sequence_of_bounded_sequences;
  }
  set bounded_sequence_of_bounded_sequences(value) {
    if (value.length > 3) {
      throw new RangeError('The length of array bounded_sequence_of_bounded_sequences must be <= 3.');
    }
    this._wrapperFields.bounded_sequence_of_bounded_sequences.fill(value);
  }
  get bounded_sequence_of_unbounded_sequences() {
    return this._wrapperFields.bounded_sequence_of_unbounded_sequences;
  }
  set bounded_sequence_of_unbounded_sequences(value) {
    if (value.length > 3) {
      throw new RangeError('The length of array bounded_sequence_of_unbounded_sequences must be <= 3.');
    }
    this._wrapperFields.bounded_sequence_of_unbounded_sequences.fill(value);
  }
  get unbounded_sequence_of_arrays() {
    return this._wrapperFields.unbounded_sequence_of_arrays;
  }
  set unbounded_sequence_of_arrays(value) {
    this._wrapperFields.unbounded_sequence_of_arrays.fill(value);
  }
  get unbounded_sequence_of_bounded_sequences() {
    return this._wrapperFields.unbounded_sequence_of_bounded_sequences;
  }
  set unbounded_sequence_of_bounded_sequences(value) {
    this._wrapperFields.unbounded_sequence_of_bounded_sequences.fill(value);
  }
  get unbounded_sequence_of_unbounded_sequences() {
    return this._wrapperFields.unbounded_sequence_of_unbounded_sequences;
  }
  set unbounded_sequence_of_unbounded_sequences(value) {
    this._wrapperFields.unbounded_sequence_of_unbounded_sequences.fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new MultiNestedRefStruct(refObject.toObject());
    this._refObject.array_of_arrays = refObject.array_of_arrays;
    this._wrapperFields.array_of_arrays.size = 3
    for (let i = 0; i < 3; i++) {
      this._wrapperFields.array_of_arrays.data[i].copyRefObject(refObject.array_of_arrays[i]);
    }
    this._refObject.array_of_bounded_sequences = refObject.array_of_bounded_sequences;
    this._wrapperFields.array_of_bounded_sequences.size = 3
    for (let i = 0; i < 3; i++) {
      this._wrapperFields.array_of_bounded_sequences.data[i].copyRefObject(refObject.array_of_bounded_sequences[i]);
    }
    this._refObject.array_of_unbounded_sequences = refObject.array_of_unbounded_sequences;
    this._wrapperFields.array_of_unbounded_sequences.size = 3
    for (let i = 0; i < 3; i++) {
      this._wrapperFields.array_of_unbounded_sequences.data[i].copyRefObject(refObject.array_of_unbounded_sequences[i]);
    }
    this._wrapperFields.bounded_sequence_of_arrays.copyRefObject(this._refObject.bounded_sequence_of_arrays);
    this._wrapperFields.bounded_sequence_of_bounded_sequences.copyRefObject(this._refObject.bounded_sequence_of_bounded_sequences);
    this._wrapperFields.bounded_sequence_of_unbounded_sequences.copyRefObject(this._refObject.bounded_sequence_of_unbounded_sequences);
    this._wrapperFields.unbounded_sequence_of_arrays.copyRefObject(this._refObject.unbounded_sequence_of_arrays);
    this._wrapperFields.unbounded_sequence_of_bounded_sequences.copyRefObject(this._refObject.unbounded_sequence_of_bounded_sequences);
    this._wrapperFields.unbounded_sequence_of_unbounded_sequences.copyRefObject(this._refObject.unbounded_sequence_of_unbounded_sequences);
  }
  copy(other) {
    this._refObject = new MultiNestedRefStruct(other._refObject.toObject());
    this._wrapperFields.array_of_arrays.copy(other._wrapperFields.array_of_arrays);
    this._wrapperFields.array_of_bounded_sequences.copy(other._wrapperFields.array_of_bounded_sequences);
    this._wrapperFields.array_of_unbounded_sequences.copy(other._wrapperFields.array_of_unbounded_sequences);
    this._wrapperFields.bounded_sequence_of_arrays.copy(other._wrapperFields.bounded_sequence_of_arrays);
    this._wrapperFields.bounded_sequence_of_bounded_sequences.copy(other._wrapperFields.bounded_sequence_of_bounded_sequences);
    this._wrapperFields.bounded_sequence_of_unbounded_sequences.copy(other._wrapperFields.bounded_sequence_of_unbounded_sequences);
    this._wrapperFields.unbounded_sequence_of_arrays.copy(other._wrapperFields.unbounded_sequence_of_arrays);
    this._wrapperFields.unbounded_sequence_of_bounded_sequences.copy(other._wrapperFields.unbounded_sequence_of_bounded_sequences);
    this._wrapperFields.unbounded_sequence_of_unbounded_sequences.copy(other._wrapperFields.unbounded_sequence_of_unbounded_sequences);
  }
  static get classType() {
    return MultiNestedWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"array_of_arrays","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":"test_msgs","type":"Arrays","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"array_of_bounded_sequences","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":"test_msgs","type":"BoundedSequences","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"array_of_unbounded_sequences","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":"test_msgs","type":"UnboundedSequences","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"bounded_sequence_of_arrays","type":{"isArray":true,"arraySize":3,"isUpperBound":true,"isDynamicArray":true,"isFixedSizeArray":false,"pkgName":"test_msgs","type":"Arrays","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"bounded_sequence_of_bounded_sequences","type":{"isArray":true,"arraySize":3,"isUpperBound":true,"isDynamicArray":true,"isFixedSizeArray":false,"pkgName":"test_msgs","type":"BoundedSequences","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"bounded_sequence_of_unbounded_sequences","type":{"isArray":true,"arraySize":3,"isUpperBound":true,"isDynamicArray":true,"isFixedSizeArray":false,"pkgName":"test_msgs","type":"UnboundedSequences","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"unbounded_sequence_of_arrays","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"test_msgs","type":"Arrays","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"unbounded_sequence_of_bounded_sequences","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"test_msgs","type":"BoundedSequences","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"unbounded_sequence_of_unbounded_sequences","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"test_msgs","type":"UnboundedSequences","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"test_msgs","type":"MultiNested","stringUpperBound":null,"isPrimitiveType":false},"msgName":"MultiNested"};
  }
  hasMember(name) {
    let memberNames = ["array_of_arrays","array_of_bounded_sequences","array_of_unbounded_sequences","bounded_sequence_of_arrays","bounded_sequence_of_bounded_sequences","bounded_sequence_of_unbounded_sequences","unbounded_sequence_of_arrays","unbounded_sequence_of_bounded_sequences","unbounded_sequence_of_unbounded_sequences"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class MultiNestedArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof MultiNestedWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new MultiNestedWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MultiNestedArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MultiNestedArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new MultiNestedRefArray(size);
    this._refObject = new MultiNestedRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new MultiNestedWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof MultiNestedArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "MultiNestedArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      MultiNestedWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return MultiNestedWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return MultiNestedArrayWrapper;
  }
}
module.exports = MultiNestedWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "array_of_arrays",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": "test_msgs",
        "type": "Arrays",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "array_of_bounded_sequences",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": "test_msgs",
        "type": "BoundedSequences",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "array_of_unbounded_sequences",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": "test_msgs",
        "type": "UnboundedSequences",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "bounded_sequence_of_arrays",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": true,
        "isDynamicArray": true,
        "isFixedSizeArray": false,
        "pkgName": "test_msgs",
        "type": "Arrays",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "bounded_sequence_of_bounded_sequences",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": true,
        "isDynamicArray": true,
        "isFixedSizeArray": false,
        "pkgName": "test_msgs",
        "type": "BoundedSequences",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "bounded_sequence_of_unbounded_sequences",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": true,
        "isDynamicArray": true,
        "isFixedSizeArray": false,
        "pkgName": "test_msgs",
        "type": "UnboundedSequences",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "unbounded_sequence_of_arrays",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "test_msgs",
        "type": "Arrays",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "unbounded_sequence_of_bounded_sequences",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "test_msgs",
        "type": "BoundedSequences",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "unbounded_sequence_of_unbounded_sequences",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "test_msgs",
        "type": "UnboundedSequences",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "test_msgs",
    "type": "MultiNested",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "MultiNested"
}
*/
